{
	"info": {
		"_postman_id": "1cdca9b2-c383-4870-ab5a-5a08675fe79d",
		"name": "compile.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25495036"
	},
	"item": [
		{
			"name": "controller",
			"item": [
				{
					"name": "corrigir",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"questionId\": 2,\r\n    \"code\": \"<?php $lista = explode(\\\",\\\", $argv[1]);sort($lista);echo \\\"Helloa World\\\";?>\",\r\n    \"language\": \"php\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/corrigir",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"corrigir"
							]
						}
					},
					"response": []
				},
				{
					"name": "compilar",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"questaoId\": 1,\r\n    \"code\": \"public class Main {public static void main(String[] args) {System.out.println(\\\"Hello a\\\");}}\",\r\n    \"language\": \"java\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/compilar",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compilar"
							]
						}
					},
					"response": []
				},
				{
					"name": "compilar",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"questaoId\": 1,\r\n    \"code\": \"<?php echo 'hello woldssr' ?>\",\r\n    \"language\": \"php\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/compilar",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compilar"
							]
						}
					},
					"response": []
				},
				{
					"name": "corrigir_xml",
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<CodeRequest>\r\n    <questionId>2</questionId>\r\n    <code><![CDATA[\r\n    <?php\r\n        $lista = explode(\",\", $argv[1]);\r\n        sort($lista);\r\n        echo implode(\",\", $lista);\r\n    ?>]]></code>\r\n    <language>php</language>\r\n</CodeRequest>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/correction/code/run",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"correction",
								"code",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "compile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<CodeDTO>\r\n    <questionId>3</questionId>\r\n    <code><![CDATA[\r\n    <?php\r\n        echo \"Hello World!\";\r\n    ?>]]></code>\r\n    <language>php</language>\r\n</CodeDTO>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/compile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"compile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "QuestionController",
			"item": [
				{
					"name": "questoes/gelAll",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/questions/get-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"get-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "questoes/get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/questions/get/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"get",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/questions/delete/11",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"delete",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Questão Hello World!</title>\r\n    <description>Crie um programa simples que imprima a frase \"Hello World\" na tela. Esta é uma introdução aos fundamentos de entrada e saída em programação e serve como um ponto de partida para a familiarização com a linguagem e o ambiente de desenvolvimento.\r\n    </description>\r\n    \r\n    <objetive>Introduzir os conceitos básicos de entrada e saída de dados. Esta tarefa é destinada a quem está iniciando e busca entender o funcionamento de comandos básicos para exibir informações ao usuário.\r\n    </objetive>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que imprima a frase \"Hello World\" na tela. O código deve usar um comando de saída simples que é comum a várias linguagens de programação.\r\n    </task>\r\n    <explanation>A explicação </explanation>\r\n    <inputFormat>Não há entrada de dados para esta questão. O programa deve apenas exibir a saída esperada.</inputFormat>\r\n    \r\n    <inputExample>''</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir uma linha de texto, exatamente como especificado abaixo.</outputFormat>\r\n    \r\n    <outputExample>Hello World</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n<code><![CDATA[\r\n<?php\r\n// Escreva seu código aqui\r\necho '';\r\n]]>\r\n</code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n<code><![CDATA[\r\n// Escreva seu código aqui\r\nconsole.log('');\r\n]]>\r\n</code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>php</language>\r\n        <code><![CDATA[<?php echo \"Hello World\"; ?>]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/update/8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"update",
								"8"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CorrectionController",
			"item": [
				{
					"name": "run",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<CodeDTO>\r\n    <questionId>1</questionId>\r\n    <code><![CDATA[\r\n    <?php\r\n        echo '1';\r\n        echo '2'\r\n    ?>]]></code>\r\n    <language>php</language>\r\n</CodeDTO>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/correction/code/run",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"correction",
								"code",
								"run"
							]
						}
					},
					"response": []
				},
				{
					"name": "submit",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTczMjU4MDkwMX0.vYVFbUHp5fNLunyDaS-eNq7i86m6GRENnSRT_ENyMnA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<CodeDTO>\r\n    <questionId>1</questionId>\r\n    <code><![CDATA[\r\n    <?php\r\n        echo 'Hello World';\r\n    ?>]]></code>\r\n    <language>php</language>\r\n    <userId>1</userId>\r\n</CodeDTO>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/correction/code/submit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"correction",
								"code",
								"submit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserController",
			"item": [
				{
					"name": "getAllUsers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/get-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"get-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/get/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"get",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "createrUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John Doe ADMIN\",\r\n  \"email\": \"johndoeadmin@example.com\",\r\n  \"password\": \"securepassword123\",\r\n  \"points\": 0,\r\n  \"role\": \"ADMIN\",\r\n  \"status\": \"ACTIVE\",\r\n  \"location\": \"BR\",\r\n  \"phoneNumber\": \"+3509891923889\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"John Doe ADMIN\",\r\n    \"email\": \"johndoeadmin@example.com\",\r\n    \"password\": \"$2a$10$Qcgbh8mt1sCsiQMO10tlh.K/sDZ3sJut8wG.oPga9P.78mkGiatUq\",\r\n    \"points\": 55,\r\n    \"role\": \"ADMIN\",\r\n    \"emailVerified\": false,\r\n    \"status\": \"ACTIVE\",\r\n    \"createdAt\": \"2024-12-24T16:27:04.922886\",\r\n    \"updatedAt\": \"2025-01-09T16:31:18.71093\",\r\n    \"achievements\": [\r\n        \"FIRST_CODE_SUBMISSION\",\r\n        \"FIVE_MATH_QUESTIONS\",\r\n        \"TEN_MATH_QUESTIONS\"\r\n    ],\r\n    \"questionsSolved\": [\r\n        7,\r\n        1,\r\n        1,\r\n        1,\r\n        1,\r\n        49,\r\n        4,\r\n        95,\r\n        96,\r\n        100\r\n    ],\r\n    \"location\": \"BR\",\r\n    \"phoneNumber\": \"35988836169\",\r\n    \"biography\": \"Essa é a minha biografia\",\r\n    \"enabled\": true,\r\n    \"authorities\": [\r\n        {\r\n            \"authority\": \"ROLE_ADMIN\"\r\n        },\r\n        {\r\n            \"authority\": \"ROLE_USER\"\r\n        }\r\n    ],\r\n    \"username\": \"johndoeadmin@example.com\",\r\n    \"accountNonExpired\": true,\r\n    \"credentialsNonExpired\": true,\r\n    \"accountNonLocked\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/update/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"update",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ChatGPT",
			"item": [
				{
					"name": "https://api.openai.com/v1/chat/completions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 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"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"model\": \"gpt-3.5-turbo-0125\",\r\n    \"messages\": [\r\n      {\r\n        \"role\": \"system\",\r\n        \"content\": \"You are a helpful assistant.\"\r\n      },\r\n      {\r\n        \"role\": \"user\",\r\n        \"content\": \"Hello!\"\r\n      }\r\n    ]\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.openai.com/v1/chat/completions",
							"protocol": "https",
							"host": [
								"api",
								"openai",
								"com"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8080/chat?prompt=\"Ola chat gpt\"",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/chat?prompt=\"Ola chat gpt\"",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"chat"
							],
							"query": [
								{
									"key": "prompt",
									"value": "\"Ola chat gpt\""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SubmitHistoryController",
			"item": [
				{
					"name": "getAll",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/history/getAll",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"history",
								"getAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "getById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/history/get/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"history",
								"get",
								"3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"johndoeadmin@example.com\",\r\n  \"password\": \"securepassword123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "bootstrap",
			"item": [
				{
					"name": "createrUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Andressa Cristine\",\r\n  \"email\": \"andressa@example.com\",\r\n  \"password\": \"securepassword123\",\r\n  \"points\": 0,\r\n  \"role\": \"ADMIN\",\r\n  \"status\": \"ACTIVE\",\r\n  \"location\": \"Brazil\",\r\n  \"phoneNumber\": \"349888318178\",\r\n  \"biography\": \"Eu sou um cara maluco\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteAll",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/questions/delete-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"delete-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-hello world",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Imprimindo \"Hello World\"</title>\r\n    <description>\r\n        Você está começando sua jornada no mundo da programação!  \r\n        Uma das primeiras tarefas em qualquer linguagem é criar um programa que exiba a frase \"Hello World\" na tela.  \r\n        Essa atividade é uma tradição entre programadores e ajuda a se familiarizar com a sintaxe básica e o ambiente de desenvolvimento.\r\n    </description>\r\n    <task>\r\n        Sua tarefa é criar um programa que imprima exatamente a frase \"Hello World\" na tela. \r\n        Aqui está como realizar essa tarefa em diferentes linguagens:  \r\n    </task>\r\n    <explanation><![CDATA['']]></explanation>\r\n\r\n    <hint>\r\n        Lembre-se de usar aspas para envolver o texto a ser exibido.\r\n    </hint>\r\n\r\n    <objective>\r\n        Ensinar como exibir informações na tela utilizando comandos básicos \r\n        de saída. Esta tarefa é destinada a iniciantes que estão dando os \r\n        primeiros passos na programação.\r\n    </objective>\r\n\r\n    <inputFormat>Não há entrada de dados para esta questão. O programa deve apenas exibir a saída esperada.</inputFormat>\r\n    <inputExample>''</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir uma linha de texto, exatamente como especificado abaixo.</outputFormat>\r\n    \r\n    <outputExample>Hello World</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n<code><![CDATA[<?php\r\n// Escreva seu código aqui\r\necho '';\r\n]]>\r\n</code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n<code><![CDATA[// Escreva seu código aqui\r\nconsole.log('');\r\n]]>\r\n</code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n<code><![CDATA[# Escreva seu código aqui\r\nprint('');\r\n]]>\r\n</code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>php</language>\r\n        <code><![CDATA[<?php echo \"Hello World\"; ?>]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>Hello World</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-contar letras",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar Letras em uma String</title>\r\n    <description>\r\n        Em diversas situações, como na análise de textos, é útil determinar a quantidade de letras presentes em uma frase ou palavra.  \r\n        Este exercício é uma introdução à manipulação básica de strings, focando na contagem de caracteres.\r\n    </description>\r\n    <task>\r\n        Escreva um programa que receba uma string como entrada e conte a quantidade de letras presentes nela, incluindo maiúsculas, minúsculas e caracteres especiais. O programa deve exibir o resultado dessa contagem.\r\n    </task>\r\n    <hint>\r\n        Use um contador para somar os caracteres da string.\r\n    </hint>\r\n    <explanation><![CDATA['']]></explanation>\r\n    \r\n    <objective>''</objective>\r\n\r\n    <inputFormat>O programa deve receber uma string com letras, números, espaços ou símbolos.</inputFormat>\r\n    \r\n    <inputExample>Hello, World!</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir um único número representando a quantidade de letras alfabéticas na string.</outputFormat>\r\n    \r\n    <outputExample>13</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\n// recebe a string\r\n$string = ($argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[// recebe a string\r\nlet string = process.argv[1];\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[# Recebe a string\r\nstring = sys.argv[1]\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Recebe a string\r\nstring = input()\r\n\r\n# Remove caracteres não alfabéticos e conta as letras\r\nsomente_letras = \"\".join(filter(str.isalpha, string))\r\nquantidade_letras = len(somente_letras)\r\n\r\n# Exibe o resultado\r\nprint(quantidade_letras)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n    \r\n    <testCases>\r\n        <testCase>\r\n            <input>Hello, World!</input>\r\n            <expectedOutput>13</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>12345!@#$%</input>\r\n            <expectedOutput>10</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>A arte de programar é incrível!</input>\r\n            <expectedOutput>33</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-contar palavras",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar Palavras em uma String</title>\r\n    <description>\r\n        Contar o número de palavras em uma string é uma tarefa comum em processamento de texto e análise de dados. Neste exercício, você aprenderá a manipular strings para contar palavras, que são sequências de caracteres separadas por espaços.\r\n    </description>\r\n    <task>\r\n        Escreva um programa que receba uma string e conte o número de palavras presentes nela. Considere que as palavras são sequências de caracteres alfabéticos separadas por espaços.\r\n        Para contar o número de palavras, você pode dividir a string utilizando os espaços como separadores e contar quantos segmentos resultam dessa divisão.  \r\n    </task>\r\n    <hint>\r\n        Considere dividir a string usando espaços como delimitadores e contar os elementos resultantes.\r\n    </hint>\r\n    <explanation><![CDATA['']]></explanation>\r\n    \r\n    <objective>''</objective>\r\n\r\n    <inputFormat>O programa deve receber uma string contendo palavras separadas por espaços.</inputFormat>\r\n    \r\n    <inputExample>Olá, Mundo! Como você está?</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir um único número representando a quantidade de palavras na string.</outputFormat>\r\n    \r\n    <outputExample>5</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\n// Recebe a string\r\n$string = $argv[1];\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[// recebe a string\r\nlet string = process.argv[1];\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[# recebe a string\r\nstring = sys.argv[1]\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[# Recebe a string\r\nstring = input()\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n    \r\n    <testCases>\r\n        <testCase>\r\n            <input>Olá, Mundo! Como você está?</input>\r\n            <expectedOutput>5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>12345!@#$%</input>\r\n            <expectedOutput>0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>Javascript pode ser utilizado do lado do servidor!</input>\r\n            <expectedOutput>8</expectedOutput>\r\n        </testCase>\r\n                <testCase>\r\n            <input>Programar em PHP!</input>\r\n            <expectedOutput>3</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>Python é incrível!</input>\r\n            <expectedOutput>3</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>Java💀</input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-converter maiscula",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Converter uma String para Maiúsculas</title>\r\n    <description>\r\n        Em programação, frequentemente precisamos alterar a capitalização de uma string. Neste exercício, você aprenderá a manipular strings para converter todas as suas letras para maiúsculas.\r\n    </description>\r\n    <task>\r\n        Escreva um programa que receba uma string e converta todas as suas letras para maiúsculas.\r\n    </task>\r\n    <hint>\r\n        Procure por uma função ou método que altere todas as letras de uma string para maiúsculas.\r\n    </hint>\r\n    <explanation><![CDATA['']]></explanation>\r\n\r\n    <objective>''</objective>\r\n\r\n    <inputFormat>O programa deve receber uma string de texto.</inputFormat>\r\n    \r\n    <inputExample>eu adoro compile.io</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a string com todas as letras em maiúsculas.</outputFormat>\r\n    \r\n    <outputExample>EU ADORO COMPILE.IO</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\n// Solicita a string\r\n$string = $argv[1];\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[ // recebe a string\r\nlet string = process.argv[1];\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n        <code><![CDATA[# receba a string\r\nsys.argv[1]\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[# receba a string\r\nsys.argv[1]\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n    \r\n    <testCases>\r\n        <testCase>\r\n            <input>olá, como vai?</input>\r\n            <expectedOutput>OLÁ, COMO VAI?</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>programação é divertida!</input>\r\n            <expectedOutput>PROGRAMAÇÃO É DIVERTIDA!</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>teste de string</input>\r\n            <expectedOutput>TESTE DE STRING</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "02-palindromo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificação de Palíndromo</title>\r\n    <description>Crie uma função que verifica se uma string é um palíndromo. Um palíndromo é uma palavra ou frase que pode ser lida da mesma forma de trás para frente. O objetivo desta questão é ensinar o uso de manipulação de strings e estruturas de controle para resolver problemas de verificação de padrões em sequências de caracteres.</description>\r\n    \r\n    <objective>Ensinar como verificar se uma string é um palíndromo, utilizando conceitos de manipulação de strings e controle de fluxo em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever uma função que verifique se a string fornecida é um palíndromo, ou seja, se ela pode ser lida da mesma forma de trás para frente. Você deve criar uma função que recebe uma string e retorna verdadeiro ou falso, dependendo do resultado da verificação.\r\n    </task>\r\n    <explanation>Um palíndromo é uma sequência de caracteres que é igual quando lida da frente para trás ou de trás para frente. Por exemplo, \"madam\" e \"racecar\" são palíndromos. A solução para este problema envolve comparar a string com sua versão invertida.</explanation>\r\n    \r\n    <inputFormat>A entrada será uma única string. A string pode conter letras maiúsculas, minúsculas e espaços. Não há restrições sobre o comprimento da string.</inputFormat>\r\n    \r\n    <inputExample>\"madam\"</inputExample>\r\n    \r\n    <outputFormat>A saída deve ser um valor booleano: \"true\" se a string for um palíndromo e \"false\" caso contrário.</outputFormat>\r\n    \r\n    <outputExample>true</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction verificarPalindromo($str) {\r\n    $str = strtolower(preg_replace('/[^a-z]/', '', $str));\r\n    // Escreva seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\nverificarPalindromo($argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[function verificarPalindromo(str) {\r\n    str = str.toLowerCase().replace(/[^a-z]/g, '');\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef verificar_palindromo(s):\r\n    s = ''.join(filter(str.isalnum, s)).lower()\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef verificar_palindromo(s):\r\n    s = ''.join(filter(str.isalnum, s)).lower()\r\n    return s == s[::-1]\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>madam</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>racecar</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>hello</input>\r\n            <expectedOutput>false</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>noon</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>world</input>\r\n            <expectedOutput>false</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>civic</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>deified</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>radar</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>level</input>\r\n            <expectedOutput>true</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>python</input>\r\n            <expectedOutput>false</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "03-fibonacci",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Fibonacci</title>\r\n    <description>Escreva um algoritmo que gere a sequência de Fibonacci até um número n fornecido pelo usuário. A sequência de Fibonacci é uma série de números onde cada número é a soma dos dois anteriores, começando com 0 e 1. Este exercício visa ensinar o conceito de iteração e a construção de sequências numéricas em programação.</description>\r\n    \r\n    <objective>Ensinar como gerar a sequência de Fibonacci até um número limite fornecido pelo usuário, utilizando laços de repetição e controle de fluxo.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que gere a sequência de Fibonacci até um número n fornecido pelo usuário. O programa deve exibir todos os números da sequência que sejam menores ou iguais a n. Lembre-se de que a sequência começa com 0 e 1, e os próximos números são a soma dos dois anteriores.\r\n    </task>\r\n    <explanation>A sequência de Fibonacci é gerada com os dois primeiros números como 0 e 1. Cada número subsequente é a soma dos dois números anteriores. O algoritmo precisa continuar gerando os números até que o próximo número da sequência ultrapasse o valor n fornecido.</explanation>\r\n    \r\n    <inputFormat>A entrada será um número inteiro n fornecido pelo usuário, representando o limite até onde a sequência deve ser gerada.</inputFormat>\r\n    \r\n    <inputExample>10</inputExample>\r\n    \r\n    <outputFormat>A saída deve ser uma lista dos números da sequência de Fibonacci até n. A lista pode ser apresentada de forma simples ou separada por espaços.</outputFormat>\r\n    \r\n    <outputExample>0 1 1 2 3 5 8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction fibonacci($n) {\r\n    // seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\nfibonacci($argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction fibonacci(n) {\r\n    let fib = [0, 1];\r\n    while (fib[fib.length - 1] + fib[fib.length - 2] <= n) {\r\n        fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\r\n    }\r\n    return fib.slice(0, fib.length - 1); // Remove o último elemento se ultrapassar n\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef fibonacci(n):\r\n    fib = [0, 1]\r\n    while fib[-1] + fib[-2] <= n:\r\n        fib.append(fib[-1] + fib[-2])\r\n    return fib[:-1]  # Exclui o último número se ele ultrapassar n\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef fibonacci(n):\r\n    fib = [0, 1]\r\n    while fib[-1] + fib[-2] <= n:\r\n        fib.append(fib[-1] + fib[-2])\r\n    return fib[:-1]  # Exclui o último número se ele ultrapassar n\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>15</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>10</input>\r\n            <expectedOutput>0 1 1 2 3 5 8</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>20</input>\r\n            <expectedOutput>0 1 1 2 3 5 8 13</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1</input>\r\n            <expectedOutput>0 1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>0 1 1 2 3</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>100</input>\r\n            <expectedOutput>0 1 1 2 3 5 8 13 21 34 55 89</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "04-fatorial",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Cálculo do Fatorial</title>\r\n    <description>\r\n        O cálculo do fatorial é uma operação matemática muito utilizada em programação, especialmente em problemas que envolvem combinações, probabilidades ou cálculos sequenciais. \r\n        Este exercício é uma oportunidade para aprender a usar loops e manipular números inteiros em cálculos.\r\n    </description>\r\n    <task>\r\n        Sua tarefa é escrever um programa que receba um número inteiro n como entrada; calcule o fatorial de n; imprima o resultado do cálculo.  \r\n    </task>\r\n    <hint>Use um loop para multiplicar os números de 1 até \\( n \\).</hint>\r\n\r\n    <explanation><![CDATA[O fatorial de um número n é o produto de todos os números inteiros de 1 até n.<br><br>Ex:<br>\r\n        5! = 5 × 4 × 3 × 2 × 1 = 120.<br>]]></explanation>\r\n\r\n    <objective>''</objective>\r\n\r\n    <inputFormat>A entrada será um número inteiro n fornecido pelo usuário. O número n será um valor não negativo (n ≥ 0).</inputFormat>\r\n    \r\n    <inputExample>5</inputExample>\r\n    \r\n    <outputFormat>A saída deve ser o valor do fatorial de n, impresso como um número inteiro.</outputFormat>\r\n    \r\n    <outputExample>120</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction fatorial($n) {\r\n    // Escreva seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\nfatorial($argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction fatorial(n) {\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef fatorial(n):\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef fatorial(n):\r\n    fatorial_result = 1\r\n    for i in range(1, n + 1):\r\n        fatorial_result *= i\r\n    return fatorial_result\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>120</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>0</input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1</input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>4</input>\r\n            <expectedOutput>24</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>6</input>\r\n            <expectedOutput>720</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>7</input>\r\n            <expectedOutput>5040</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>3</input>\r\n            <expectedOutput>6</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>8</input>\r\n            <expectedOutput>40320</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>2</input>\r\n            <expectedOutput>2</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>10</input>\r\n            <expectedOutput>3628800</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "05-vogal",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contagem de Vogais</title>\r\n    <description>Crie uma função que conte o número de vogais (a, e, i, o, u) em uma string fornecida pelo usuário. Este exercício é uma introdução ao trabalho com strings e ao uso de laços de repetição e condições em programação.</description>\r\n    \r\n    <objective>Ensinar a manipulação de strings e o uso de laços de repetição e condições para contar caracteres específicos em uma string.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que conte o número de vogais (a, e, i, o, u) em uma string fornecida pelo usuário. O programa deve percorrer cada caractere da string e contar quantos são vogais, ignorando letras maiúsculas e minúsculas.\r\n    </task>\r\n    <explanation>O programa deve iterar sobre cada caractere da string e verificar se ele é uma vogal. Caso seja, deve incrementar uma variável contadora. A contagem final deve ser impressa no final.</explanation>\r\n    \r\n    <inputFormat>A entrada será uma string fornecida pelo usuário. A string pode conter letras maiúsculas ou minúsculas e pode incluir outros caracteres, como espaços e pontuações.</inputFormat>\r\n    \r\n    <inputExample>\"Hello World\"</inputExample>\r\n    \r\n    <outputFormat>A saída deve ser o número total de vogais (a, e, i, o, u) na string fornecida.</outputFormat>\r\n    \r\n    <outputExample>3</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction contarVogais($str) {\r\n    // Escreva seu código aqui\r\n    $count = 0;\r\n    \r\n    echo $count;\r\n}\r\n\r\n// recebimento do input\r\ncontarVogais($argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction contarVogais(str) {\r\n    let count = 0;\r\n    // Escreva seu código aqui\r\n    return count;\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef contar_vogais(str):\r\n    count = 0\r\n    # Escreva seu código aqui\r\n    return count\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef contar_vogais(str):\r\n    count = 0\r\n    for char in str.lower():\r\n        if char in 'aeiou':\r\n            count += 1\r\n    return count\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>\"Hello World\"</input>\r\n            <expectedOutput>3</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"OpenAI\"</input>\r\n            <expectedOutput>3</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"Python Programming\"</input>\r\n            <expectedOutput>4</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"AI is awesome\"</input>\r\n            <expectedOutput>6</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"aeiou\"</input>\r\n            <expectedOutput>5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</input>\r\n            <expectedOutput>5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"The quick brown fox jumps over the lazy dog\"</input>\r\n            <expectedOutput>11</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"1234567890\"</input>\r\n            <expectedOutput>0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"This is a test string with vowels\"</input>\r\n            <expectedOutput>9</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>\"No vowels here!\"</input>\r\n            <expectedOutput>4</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "07-negativo zero",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Número positivo ou negativo</title>\r\n    <description>Crie um programa que peça ao usuário para digitar um número e informe se ele é positivo, negativo ou zero. Este exercício tem como objetivo ensinar o uso de estruturas condicionais em programação.</description>\r\n    \r\n    <objective>Ensinar o uso de estruturas condicionais (if-else) para avaliar se um número é positivo, negativo ou zero.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que solicite um número ao usuário e informe se o número é positivo, negativo ou zero. O código deve usar uma estrutura condicional simples para verificar a condição.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve verificar se o número fornecido é maior que zero (positivo), menor que zero (negativo) ou igual a zero.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>-5</inputExample>\r\n    \r\n    <outputFormat>A saída será uma mensagem informando se o número é positivo, negativo ou zero.</outputFormat>\r\n    \r\n    <outputExample>O número é negativo.</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction verificaPositivoNegativo(int $number) {\r\n  // escreva seu código aqui\r\n\r\n  echo '';\r\n}\r\n\r\n// recebimento do input\r\nverificaPositivoNegativo($argv[1]);\r\n\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = ; // Solicite ao usuário um número\r\n\r\n// Verifique se o número é positivo, negativo ou zero\r\nif (numero > 0) {\r\n    console.log(\"O número é positivo.\");\r\n} else if (numero < 0) {\r\n    console.log(\"O número é negativo.\");\r\n} else {\r\n    console.log(\"O número é zero.\");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\nnumero = int(input())  # Solicite ao usuário um número\r\n\r\n# Verifique se o número é positivo, negativo ou zero\r\nif numero > 0:\r\n    print(\"O número é positivo.\")\r\nelif numero < 0:\r\n    print(\"O número é negativo.\")\r\nelse:\r\n    print(\"O número é zero.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\nnumero = int(input())  # Solicite ao usuário um número\r\n\r\n# Verifique se o número é positivo, negativo ou zero\r\nif numero > 0:\r\n    print(\"O número é positivo.\")\r\nelif numero < 0:\r\n    print(\"O número é negativo.\")\r\nelse:\r\n    print(\"O número é zero.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONDITIONS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>-5</input>\r\n        <expectedOutput>O número é negativo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>O número é positivo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0</input>\r\n        <expectedOutput>O número é zero.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3</input>\r\n        <expectedOutput>O número é positivo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-2</input>\r\n        <expectedOutput>O número é negativo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-1</input>\r\n        <expectedOutput>O número é negativo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>O número é positivo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-100</input>\r\n        <expectedOutput>O número é negativo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>O número é positivo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0</input>\r\n        <expectedOutput>O número é zero.</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "06-soma",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Soma de Dois Números</title>\r\n    <description>Crie uma função que leia dois números e retorne a soma deles. Este exercício tem como objetivo ensinar a entrada e saída de dados e o básico de operações matemáticas em programação.</description>\r\n    \r\n    <objective>Ensinar a realizar operações matemáticas simples (como a soma) e a manipulação de variáveis em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba dois números inteiros e retorne a soma desses números. O programa deve ler os dois números fornecidos pelo usuário e calcular a soma deles.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve ler dois números fornecidos pelo usuário e somá-los. A operação de soma é uma das operações matemáticas mais simples e é fundamental para entender como manipular dados numéricos em programação.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por dois números inteiros fornecidos pelo usuário. Os números podem ser positivos ou negativos.</inputFormat>\r\n    \r\n    <inputExample>5 3</inputExample>\r\n    \r\n    <outputFormat>A saída será a soma dos dois números fornecidos, impresso como um número inteiro.</outputFormat>\r\n    \r\n    <outputExample>8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction somar(int $a, int $b): int\r\n{\r\n  $result = 0;\r\n  // Escreva seu código aqui\r\n\r\n  return $result;\r\n}\r\n\r\n// recebimento do input\r\n$arr = explode(' ', $argv[1]);\r\n$result = somar((int) $arr[0], (int) $arr[1]);\r\n\r\necho $result;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[function somar(a, b) {\r\n    // escreva seu código aqui\r\n  return;\r\n}\r\n\r\n// recebimento do input\r\nconst a = parseInt(process.argv[1], 10);\r\nconst b = parseInt(process.argv[2], 10);\r\n\r\nconst resultado = somar(a, b);\r\nconsole.log(resultado);]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[import sys\r\n\r\ndef somar(a, b):\r\n  # escreva seu código aqui\r\n  return\r\n\r\n# recebimento do input\r\na = int(sys.argv[1])\r\nb = int(sys.argv[2])\r\n\r\nresultado = somar(a, b)\r\nprint(resultado)]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef somar(a, b):\r\n    return a + b\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>OPERATIONS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>5 3</input>\r\n            <expectedOutput>8</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>10 -4</input>\r\n            <expectedOutput>6</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-3 -6</input>\r\n            <expectedOutput>-9</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>0 0</input>\r\n            <expectedOutput>0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>7 7</input>\r\n            <expectedOutput>14</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1 1</input>\r\n            <expectedOutput>2</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1000 1000</input>\r\n            <expectedOutput>2000</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-30 -60</input>\r\n            <expectedOutput>-90</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-1 0</input>\r\n            <expectedOutput>-1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>99999 1</input>\r\n            <expectedOutput>100000</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "09-media",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Média de Três Números</title>\r\n    <description>Crie uma função que receba três números e calcule a média aritmética deles. Este exercício visa ensinar o uso de operações matemáticas básicas e manipulação de variáveis em programação.</description>\r\n    \r\n    <objective>Ensinar a calcular a média aritmética de três números e reforçar o entendimento de operações com números em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba três números inteiros ou decimais fornecidos pelo usuário e calcule a média aritmética deles. O programa deve somar os três números e dividir o resultado por três para calcular a média.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve somar os três números fornecidos pelo usuário e dividir o resultado por três. Isso demonstrará a operação de média aritmética básica, importante para muitas aplicações matemáticas.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por três números, que podem ser inteiros ou decimais.</inputFormat>\r\n    \r\n    <inputExample>7 8 9</inputExample>\r\n    \r\n    <outputFormat>A saída será o valor da média aritmética dos três números fornecidos, impresso como um número decimal ou inteiro, dependendo da precisão da operação.</outputFormat>\r\n    \r\n    <outputExample>8.0</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction calcularMedia(int $a, int $b, int $c): float\r\n{\r\n  $result = 0;\r\n  // Escreva seu código aqui\r\n\r\n  return $result;\r\n}\r\n\r\n// recebimento do input\r\n$arr = explode(' ', $argv[1]);\r\n$result = calcularMedia((int) $arr[0], (int) $arr[1], (int) $arr[2]);\r\n\r\necho number_format($result, 1);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction calcularMedia(a, b, c) {\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef calcular_media(a, b, c):\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef calcular_media(a, b, c):\r\n    return (a + b + c) / 3\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>OPERATIONS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>7 8 9</input>\r\n            <expectedOutput>8.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>10 20 30</input>\r\n            <expectedOutput>20.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1 2 3</input>\r\n            <expectedOutput>2.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>15 10 5</input>\r\n            <expectedOutput>10.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>2.5 3.5 4.5</input>\r\n            <expectedOutput>3.5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>100 200 300</input>\r\n            <expectedOutput>200.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>0 0 0</input>\r\n            <expectedOutput>0.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>3.75 6.25 9.0</input>\r\n            <expectedOutput>6.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-5 -10 -15</input>\r\n            <expectedOutput>-10.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>4.5 4.5 4.5</input>\r\n            <expectedOutput>4.5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>7.1 8.3 9.9</input>\r\n            <expectedOutput>8.1</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "11-temperatura",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Conversão de Temperatura</title>\r\n    <description>Crie uma função que converta uma temperatura fornecida em Celsius para Fahrenheit. Este exercício visa ensinar a manipulação de variáveis e operações matemáticas básicas em programação.</description>\r\n    \r\n    <objective>Ensinar a conversão de temperaturas entre escalas diferentes e a realização de operações matemáticas simples.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba uma temperatura em Celsius fornecida pelo usuário e converta essa temperatura para Fahrenheit. A fórmula para conversão é: Fahrenheit = (Celsius * 9/5) + 32.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve aplicar a fórmula de conversão de Celsius para Fahrenheit. A multiplicação da temperatura em Celsius por 9/5, seguida da adição de 32, converte corretamente a temperatura para Fahrenheit.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por um número decimal que representa a temperatura em Celsius.</inputFormat>\r\n    \r\n    <inputExample>25</inputExample>\r\n    \r\n    <outputFormat>A saída será a temperatura convertida para a escala Fahrenheit, com duas casas decimais.</outputFormat>\r\n    \r\n    <outputExample>77.0</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction converterTemperatura($celsius) {\r\n    // Escreva seu código aqui\r\n}\r\n\r\n// recebimento do input\r\nconverterTemperatura((float) $argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction converterTemperatura(celsius) {\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef converter_temperatura(celsius):\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef converter_temperatura(celsius):\r\n    return (celsius * 9/5) + 32\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONVERSIONS</category>\r\n    <level>ADVANCED</level>\r\n    <points>15</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>20</input>\r\n            <expectedOutput>68.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-5</input>\r\n            <expectedOutput>23.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>50</input>\r\n            <expectedOutput>122.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>15</input>\r\n            <expectedOutput>59.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>7.5</input>\r\n            <expectedOutput>45.5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>32.8</input>\r\n            <expectedOutput>91.04</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>0.1</input>\r\n            <expectedOutput>32.18</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-20</input>\r\n            <expectedOutput>-4.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>80</input>\r\n            <expectedOutput>176.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>60.5</input>\r\n            <expectedOutput>141.0</expectedOutput>\r\n        </testCase>\r\n\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "10-par impar",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se o Número é Par ou Ímpar</title>\r\n    <description>Crie uma função que verifique se um número é par ou ímpar. Este exercício visa ensinar o uso de operadores aritméticos e de controle de fluxo (condições) em programação.</description>\r\n    \r\n    <objective>Ensinar a utilização de operadores aritméticos e a estrutura condicional para determinar se um número é par ou ímpar.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número inteiro fornecido pelo usuário e determine se ele é par ou ímpar. O código deve usar a operação de módulo para verificar a divisibilidade por 2.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve verificar se o número fornecido pelo usuário é divisível por 2 (resto da divisão igual a zero). Se for, o número é par, caso contrário, ele é ímpar.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>7</inputExample>\r\n    \r\n    <outputFormat>A saída será uma mensagem indicando se o número é \"Par\" ou \"Ímpar\".</outputFormat>\r\n    \r\n    <outputExample>Ímpar</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction verificarParOuImpar(int $numero) {\r\n  // Escreva seu código aqui\r\n}\r\n\r\n// recebimento do input\r\nverificarParOuImpar((int) $argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction verificarParOuImpar(numero) {\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef verificar_par_ou_impar(numero):\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef verificar_par_ou_impar(numero):\r\n    if numero % 2 == 0:\r\n        return \"Par\"\r\n    else:\r\n        return \"Ímpar\"\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONDITIONS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>12</input>\r\n            <expectedOutput>Par</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>17</input>\r\n            <expectedOutput>Ímpar</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>100</input>\r\n            <expectedOutput>Par</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-25</input>\r\n            <expectedOutput>Ímpar</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>50</input>\r\n            <expectedOutput>Par</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-51</input>\r\n            <expectedOutput>Ímpar</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>18</input>\r\n            <expectedOutput>Par</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>13</input>\r\n            <expectedOutput>Ímpar</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>-22</input>\r\n            <expectedOutput>Par</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>29</input>\r\n            <expectedOutput>Ímpar</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "12-tabuada",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Tabuada</title>\r\n    <description>Crie uma função que solicite um número e imprima a sua tabuada de 1 a 10. Este exercício tem como objetivo ensinar a utilização de laços de repetição e operações aritméticas básicas.</description>\r\n    \r\n    <objective>Ensinar o uso de laços de repetição (loops) e operações de multiplicação para resolver problemas simples de cálculo.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número fornecido pelo usuário e imprima sua tabuada de 1 a 10. O código deve usar um laço de repetição para gerar e imprimir cada resultado da multiplicação.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o código deve usar um laço de repetição para multiplicar o número fornecido pelo usuário com os números de 1 a 10 e imprimir o resultado de cada operação.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>7</inputExample>\r\n    \r\n    <outputFormat>A saída será a tabuada do número fornecido, com 10 resultados, de 1 a 10.</outputFormat>\r\n    \r\n    <outputExample>7 x 1 = 7\r\n7 x 2 = 14\r\n7 x 3 = 21\r\n7 x 4 = 28\r\n7 x 5 = 35\r\n7 x 6 = 42\r\n7 x 7 = 49\r\n7 x 8 = 56\r\n7 x 9 = 63\r\n7 x 10 = 70</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction imprimirTabuada(int $numero) {\r\n    // Escreva seu código aqui\r\n    echo $numero;\r\n}\r\n\r\n// recebimento do input\r\nimprimirTabuada((int) $argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction imprimirTabuada(numero) {\r\n    // Escreva seu código aqui\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef imprimir_tabuada(numero):\r\n    # Escreva seu código aqui\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef imprimir_tabuada(numero):\r\n    for i in range(1, 11):\r\n        print(f\"{numero} x {i} = {numero * i}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>7</input>\r\n        <expectedOutput>7 x 1 = 7\r\n7 x 2 = 14\r\n7 x 3 = 21\r\n7 x 4 = 28\r\n7 x 5 = 35\r\n7 x 6 = 42\r\n7 x 7 = 49\r\n7 x 8 = 56\r\n7 x 9 = 63\r\n7 x 10 = 70</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5</input>\r\n        <expectedOutput>5 x 1 = 5\r\n5 x 2 = 10\r\n5 x 3 = 15\r\n5 x 4 = 20\r\n5 x 5 = 25\r\n5 x 6 = 30\r\n5 x 7 = 35\r\n5 x 8 = 40\r\n5 x 9 = 45\r\n5 x 10 = 50</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>1 x 1 = 1\r\n1 x 2 = 2\r\n1 x 3 = 3\r\n1 x 4 = 4\r\n1 x 5 = 5\r\n1 x 6 = 6\r\n1 x 7 = 7\r\n1 x 8 = 8\r\n1 x 9 = 9\r\n1 x 10 = 10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>10 x 1 = 10\r\n10 x 2 = 20\r\n10 x 3 = 30\r\n10 x 4 = 40\r\n10 x 5 = 50\r\n10 x 6 = 60\r\n10 x 7 = 70\r\n10 x 8 = 80\r\n10 x 9 = 90\r\n10 x 10 = 100</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2</input>\r\n        <expectedOutput>2 x 1 = 2\r\n2 x 2 = 4\r\n2 x 3 = 6\r\n2 x 4 = 8\r\n2 x 5 = 10\r\n2 x 6 = 12\r\n2 x 7 = 14\r\n2 x 8 = 16\r\n2 x 9 = 18\r\n2 x 10 = 20</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8</input>\r\n        <expectedOutput>8 x 1 = 8\r\n8 x 2 = 16\r\n8 x 3 = 24\r\n8 x 4 = 32\r\n8 x 5 = 40\r\n8 x 6 = 48\r\n8 x 7 = 56\r\n8 x 8 = 64\r\n8 x 9 = 72\r\n8 x 10 = 80</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12</input>\r\n        <expectedOutput>12 x 1 = 12\r\n12 x 2 = 24\r\n12 x 3 = 36\r\n12 x 4 = 48\r\n12 x 5 = 60\r\n12 x 6 = 72\r\n12 x 7 = 84\r\n12 x 8 = 96\r\n12 x 9 = 108\r\n12 x 10 = 120</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3</input>\r\n        <expectedOutput>3 x 1 = 3\r\n3 x 2 = 6\r\n3 x 3 = 9\r\n3 x 4 = 12\r\n3 x 5 = 15\r\n3 x 6 = 18\r\n3 x 7 = 21\r\n3 x 8 = 24\r\n3 x 9 = 27\r\n3 x 10 = 30</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>15 x 1 = 15\r\n15 x 2 = 30\r\n15 x 3 = 45\r\n15 x 4 = 60\r\n15 x 5 = 75\r\n15 x 6 = 90\r\n15 x 7 = 105\r\n15 x 8 = 120\r\n15 x 9 = 135\r\n15 x 10 = 150</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>6</input>\r\n        <expectedOutput>6 x 1 = 6\r\n6 x 2 = 12\r\n6 x 3 = 18\r\n6 x 4 = 24\r\n6 x 5 = 30\r\n6 x 6 = 36\r\n6 x 7 = 42\r\n6 x 8 = 48\r\n6 x 9 = 54\r\n6 x 10 = 60</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "13-primo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se um número é primo</title>\r\n    <description>Crie um programa que determine se um número inteiro fornecido pelo usuário é primo. Um número primo é um número maior que 1 que possui apenas dois divisores: 1 e ele mesmo. Este exercício tem como objetivo ensinar o uso de loops e verificações de divisibilidade em programação.</description>\r\n    \r\n    <objective>Ensinar a utilizar estruturas de repetição (loops) e condições para verificar se um número é primo.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que determine se o número fornecido pelo usuário é primo. O código deve verificar se o número é divisível apenas por 1 e ele mesmo.\r\n    </task>\r\n    <explanation>Para verificar se um número é primo, devemos testar se ele tem divisores além de 1 e ele próprio. O algoritmo pode ser otimizado verificando até a raiz quadrada do número, pois divisores maiores que a raiz quadrada terão correspondentes menores que a raiz quadrada.</explanation>\r\n    \r\n    <inputFormat>A entrada será composta por um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>7</inputExample>\r\n    \r\n    <outputFormat>A saída será uma mensagem informando se o número é primo ou não.</outputFormat>\r\n    \r\n    <outputExample>O número é primo.</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction verificarPrimo(int $numero) {\r\n  // Escreva seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\nverificarPrimo((int) $argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = ; // Solicite ao usuário um número\r\n\r\n// Verifique se o número é primo\r\nlet primo = true;\r\nif (numero <= 1) {\r\n    primo = false;\r\n} else {\r\n    for (let i = 2; i <= Math.sqrt(numero); i++) {\r\n        if (numero % i === 0) {\r\n            primo = false;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nif (primo) {\r\n    console.log(\"O número é primo.\");\r\n} else {\r\n    console.log(\"O número não é primo.\");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\nnumero = int(input())  # Solicite ao usuário um número\r\n\r\n# Verifique se o número é primo\r\nprimo = True\r\nif numero <= 1:\r\n    primo = False\r\nelse:\r\n    for i in range(2, int(numero ** 0.5) + 1):\r\n        if numero % i == 0:\r\n            primo = False\r\n            break\r\n\r\nif primo:\r\n    print(\"O número é primo.\")\r\nelse:\r\n    print(\"O número não é primo.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\nnumero = int(input())  # Solicite ao usuário um número\r\n\r\n# Verifique se o número é primo\r\nprimo = True\r\nif numero <= 1:\r\n    primo = False\r\nelse:\r\n    for i in range(2, int(numero ** 0.5) + 1):\r\n        if numero % i == 0:\r\n            primo = False\r\n            break\r\n\r\nif primo:\r\n    print(\"O número é primo.\")\r\nelse:\r\n    print(\"O número não é primo.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>7</input>\r\n        <expectedOutput>O número é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>O número não é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>O número não é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>11</input>\r\n        <expectedOutput>O número é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25</input>\r\n        <expectedOutput>O número não é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2</input>\r\n        <expectedOutput>O número é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>13</input>\r\n        <expectedOutput>O número é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>O número não é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>19</input>\r\n        <expectedOutput>O número é primo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>99</input>\r\n        <expectedOutput>O número não é primo.</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "14-100",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar até 100</title>\r\n    <description>Crie um programa que imprima os números de 1 a 100. Este exercício tem como objetivo ensinar o uso de estruturas de repetição básicas (como loops) para percorrer uma sequência de números e exibir resultados na tela.</description>\r\n    \r\n    <objective>Ensinar a utilizar loops para repetir ações múltiplas vezes e imprimir números sequenciais.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que imprima os números de 1 a 100, um ao lado do outro. O código deve utilizar um loop para percorrer os números e exibi-los na tela.\r\n    </task>\r\n    <explanation>Um loop simples pode ser utilizado para percorrer os números de 1 a 100. Ao utilizar um comando de saída, como `print`, os números podem ser exibidos em uma linha única, separados por espaços.</explanation>\r\n    \r\n    <inputFormat>Não há entrada de dados para esta questão. O programa deve apenas exibir os números de 1 a 100 em uma única linha.</inputFormat>\r\n    \r\n    <inputExample>''</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir os números de 1 a 100 em uma única linha, separados por espaços.</outputFormat>\r\n    \r\n    <outputExample>\r\n        1 2 3 4 5 6 ... 99 100\r\n    </outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction contar() {\r\n  $limit = 0;\r\n  for ($i = 1; $i <= $limit; $i++) {\r\n    echo '';\r\n  }\r\n}\r\n\r\ncontar();\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfor (let i = 1; i <= 100; i++) {\r\n    process.stdout.write(i + \" \");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\nfor i in range(1, 101):\r\n    print(i, end=\" \")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\nfor i in range(1, 101):\r\n    print(i, end=\" \")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>50</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>25</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>10</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>75</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>100</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>99</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>20</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input></input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "15-sequencia",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar até um número específico</title>\r\n    <description>Crie um programa que solicite um número inteiro e imprima todos os números de 1 até esse número. Este exercício tem como objetivo ensinar o uso de loops com entrada de dados fornecida pelo usuário.</description>\r\n    \r\n    <objective>Ensinar a utilização de loops em conjunto com entrada de dados, permitindo que o programa conte até um número fornecido pelo usuário.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que solicite um número inteiro ao usuário e imprima todos os números de 1 até o número fornecido. O código deve utilizar um loop para percorrer os números e exibi-los na tela.\r\n    </task>\r\n    <explanation>Um loop pode ser usado para percorrer os números de 1 até o número fornecido pelo usuário. O exercício pratica a combinação de entrada de dados com a iteração de um loop.</explanation>\r\n    \r\n    <inputFormat>O programa deve solicitar um número inteiro do usuário, representando o número até o qual a contagem será feita.</inputFormat>\r\n    \r\n    <inputExample>5</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir os números de 1 até o número fornecido pelo usuário, um por linha.</outputFormat>\r\n    \r\n    <outputExample>1 2 3 4 5</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction contarAte(int $numero) {\r\n  // escreva seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\ncontarAte((int) $argv[1]);\r\n\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = parseInt(prompt(\"Digite um número:\"));\r\n\r\n// Imprimir números de 1 até o número fornecido\r\nfor (let i = 1; i <= numero; i++) {\r\n    console.log(i);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\nnumero = int(input(\"Digite um número: \"))\r\n\r\n# Imprimir números de 1 até o número fornecido\r\nfor i in range(1, numero + 1):\r\n    print(i)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\nnumero = int(input(\"Digite um número: \"))\r\n\r\n# Imprimir números de 1 até o número fornecido\r\nfor i in range(1, numero + 1):\r\n    print(i)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>1 2 3 4 5</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>10</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1</input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>15</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>20</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>8</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>25</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>30</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>12</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>50</input>\r\n            <expectedOutput>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "16-inverter",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Inverter um número</title>\r\n    <description>Crie um programa que receba um número de três dígitos e inverta a ordem de seus dígitos. Este exercício tem como objetivo ensinar a manipulação de números e como utilizar operações matemáticas para inverter os dígitos de um número.</description>\r\n    \r\n    <objective>Ensinar como manipular números inteiros e como inverter os seus dígitos utilizando operações matemáticas simples.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia um número de três dígitos e imprima o número com seus dígitos invertidos.\r\n    </task>\r\n    <explanation>Para inverter o número, o exercício pode ser resolvido utilizando operações de módulo e divisão. Ao dividir o número por 10 e utilizar o módulo 10, é possível separar os dígitos e rearranjá-los na ordem inversa.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro de três dígitos como entrada.</inputFormat>\r\n    \r\n    <inputExample>123</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o número com seus dígitos invertidos.</outputFormat>\r\n    \r\n    <outputExample>321</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[<?php\r\nfunction inverterNumeros(int $numero) {\r\n  // escreva seu código aqui\r\n\r\n}\r\n\r\n// recebimento do input\r\ninverterNumeros((int) $argv[1]);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = prompt(\"Digite um número de três dígitos:\");\r\n\r\n// Inverter os dígitos\r\nlet centena = Math.floor(numero / 100);\r\nlet dezena = Math.floor((numero % 100) / 10);\r\nlet unidade = numero % 10;\r\n\r\nlet numeroInvertido = unidade * 100 + dezena * 10 + centena;\r\n\r\nconsole.log(\"Número invertido: \" + numeroInvertido);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\nnumero = int(input(\"Digite um número de três dígitos: \"))\r\n\r\n# Inverter os dígitos\r\ncentena = numero // 100\r\ndezena = (numero % 100) // 10\r\nunidade = numero % 10\r\n\r\nnumeroInvertido = unidade * 100 + dezena * 10 + centena\r\n\r\nprint(f\"Número invertido: {numeroInvertido}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\nnumero = int(input(\"Digite um número de três dígitos: \"))\r\n\r\n# Inverter os dígitos\r\ncentena = numero // 100\r\ndezena = (numero % 100) // 10\r\nunidade = numero % 10\r\n\r\nnumeroInvertido = unidade * 100 + dezena * 10 + centena\r\n\r\nprint(f\"Número invertido: {numeroInvertido}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>123</input>\r\n        <expectedOutput>321</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>987</input>\r\n        <expectedOutput>789</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>456</input>\r\n        <expectedOutput>654</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>321</input>\r\n        <expectedOutput>123</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>654</input>\r\n        <expectedOutput>456</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>789</input>\r\n        <expectedOutput>987</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>210</input>\r\n        <expectedOutput>12</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>890</input>\r\n        <expectedOutput>98</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100</input>\r\n        <expectedOutput>1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>111</input>\r\n        <expectedOutput>111</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "17-matriz",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Multiplicação de duas matrizes (2x2)</title>\r\n    <description>Crie um programa que receba duas matrizes 2x2 e calcule o produto entre elas. Este exercício visa ensinar a multiplicação de matrizes, um conceito importante em álgebra linear, e como trabalhar com arrays bidimensionais em programação.</description>\r\n    \r\n    <objective>Ensinar a multiplicação de matrizes 2x2, um conceito fundamental em álgebra, utilizando arrays bidimensionais em diferentes linguagens de programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia duas matrizes 2x2 e calcule o produto entre elas, resultando em uma nova matriz 2x2.\r\n    </task>\r\n    <explanation>Para multiplicar duas matrizes 2x2, você deve seguir a regra da multiplicação de matrizes: cada elemento da matriz resultante é obtido pela soma dos produtos dos elementos correspondentes das linhas da primeira matriz e das colunas da segunda matriz.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber duas matrizes 2x2 como entrada, sendo cada matriz composta por 4 números inteiros.</inputFormat>\r\n    \r\n    <inputExample>    1 2\r\n    3 4\r\n    5 6\r\n    7 8</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a matriz resultante da multiplicação das duas matrizes fornecidas.</outputFormat>\r\n    \r\n    <outputExample>    19 22\r\n    43 50</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Função para multiplicar duas matrizes 2x2\r\nfunction multiplicarMatrizes($matrizA, $matrizB) {\r\n    $resultado = array();\r\n    for ($i = 0; $i < 2; $i++) {\r\n        for ($j = 0; $j < 2; $j++) {\r\n            $resultado[$i][$j] = 0;\r\n            for ($k = 0; $k < 2; $k++) {\r\n                $resultado[$i][$j] += $matrizA[$i][$k] * $matrizB[$k][$j];\r\n            }\r\n        }\r\n    }\r\n    return $resultado;\r\n}\r\n\r\n// Matrizes 2x2 de entrada\r\n$matrizA = array(array(1, 2), array(3, 4));\r\n$matrizB = array(array(5, 6), array(7, 8));\r\n\r\n// Multiplicação\r\n$resultado = multiplicarMatrizes($matrizA, $matrizB);\r\n\r\n// Exibir resultado\r\nforeach ($resultado as $linha) {\r\n    echo implode(\" \", $linha) . \"\\n\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction multiplicarMatrizes(matrizA, matrizB) {\r\n    let resultado = [];\r\n    for (let i = 0; i < 2; i++) {\r\n        resultado[i] = [];\r\n        for (let j = 0; j < 2; j++) {\r\n            resultado[i][j] = 0;\r\n            for (let k = 0; k < 2; k++) {\r\n                resultado[i][j] += matrizA[i][k] * matrizB[k][j];\r\n            }\r\n        }\r\n    }\r\n    return resultado;\r\n}\r\n\r\n// Matrizes 2x2 de entrada\r\nlet matrizA = [[1, 2], [3, 4]];\r\nlet matrizB = [[5, 6], [7, 8]];\r\n\r\n// Multiplicação\r\nlet resultado = multiplicarMatrizes(matrizA, matrizB);\r\n\r\n// Exibir resultado\r\nresultado.forEach(linha => console.log(linha.join(\" \")));\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\ndef multiplicar_matrizes(matrizA, matrizB):\r\n    resultado = [[0, 0], [0, 0]]\r\n    for i in range(2):\r\n        for j in range(2):\r\n            for k in range(2):\r\n                resultado[i][j] += matrizA[i][k] * matrizB[k][j]\r\n    return resultado\r\n\r\n# Matrizes 2x2 de entrada\r\nmatrizA = [[1, 2], [3, 4]]\r\nmatrizB = [[5, 6], [7, 8]]\r\n\r\n# Multiplicação\r\nresultado = multiplicar_matrizes(matrizA, matrizB)\r\n\r\n# Exibir resultado\r\nfor linha in resultado:\r\n    print(\" \".join(map(str, linha)))\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\ndef multiplicar_matrizes(matrizA, matrizB):\r\n    resultado = [[0, 0], [0, 0]]\r\n    for i in range(2):\r\n        for j in range(2):\r\n            for k in range(2):\r\n                resultado[i][j] += matrizA[i][k] * matrizB[k][j]\r\n    return resultado\r\n\r\n# Matrizes 2x2 de entrada\r\nmatrizA = [[1, 2], [3, 4]]\r\nmatrizB = [[5, 6], [7, 8]]\r\n\r\n# Multiplicação\r\nresultado = multiplicar_matrizes(matrizA, matrizB)\r\n\r\n# Exibir resultado\r\nfor linha in resultado:\r\n    print(\" \".join(map(str, linha)))\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>ARRAY</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>15</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>1 2 3 4 5 6 7 8</input>\r\n        <expectedOutput>19 22\\n43 50</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2 0 1 3 4 1 2 3</input>\r\n        <expectedOutput>8 6\\n16 9</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1 1 1 1 1 1 1 1</input>\r\n        <expectedOutput>2 2\\n2 2</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1 0 0 1 1 0 0 1</input>\r\n        <expectedOutput>1 0\\n0 1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3 2 1 4 5 6 7 8</input>\r\n        <expectedOutput>27 30\\n51 58</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1 3 2 4 0 5 1 2</input>\r\n        <expectedOutput>3 13\\n8 23</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>4 1 3 2 7 8 5 6</input>\r\n        <expectedOutput>37 40\\n55 58</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2 1 1 2 3 4 5 6</input>\r\n        <expectedOutput>9 12\\n15 20</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0 1 2 3 4 5 6 7</input>\r\n        <expectedOutput>12 15\\n24 30</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>6 7 8 9 1 0 3 4</input>\r\n        <expectedOutput>54 63\\n27 32</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "18-maior numero",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Maior de três números</title>\r\n    <description>Crie um programa que solicite ao usuário que insira três números inteiros e determine qual é o maior entre eles. Este exercício tem como objetivo ensinar como comparar valores em programação e como usar estruturas condicionais para tomar decisões.</description>\r\n    \r\n    <objective>Ensinar como comparar três números inteiros e determinar o maior entre eles, utilizando estruturas condicionais como o \"if\" ou \"else\" em diferentes linguagens de programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia três números inteiros fornecidos pelo usuário e determine qual é o maior entre eles.\r\n    </task>\r\n    <explanation>Para resolver este problema, o programa deve usar uma estrutura condicional para comparar os três números e imprimir o maior. Se todos os números forem iguais, o programa deve informar que não há um único maior.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber três números inteiros como entrada.</inputFormat>\r\n    \r\n    <inputExample>5 8 3</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o maior número entre os três fornecidos.</outputFormat>\r\n    \r\n    <outputExample>8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicitar três números ao usuário\r\n$num1 = (int) readline(\"Digite o primeiro número: \");\r\n$num2 = (int) readline(\"Digite o segundo número: \");\r\n$num3 = (int) readline(\"Digite o terceiro número: \");\r\n\r\n// Verificar qual é o maior\r\nif ($num1 >= $num2 && $num1 >= $num3) {\r\n    echo \"O maior número é: \" . $num1;\r\n} elseif ($num2 >= $num1 && $num2 >= $num3) {\r\n    echo \"O maior número é: \" . $num2;\r\n} else {\r\n    echo \"O maior número é: \" . $num3;\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet num1 = prompt(\"Digite o primeiro número:\");\r\nlet num2 = prompt(\"Digite o segundo número:\");\r\nlet num3 = prompt(\"Digite o terceiro número:\");\r\n\r\n// Converter para inteiros\r\nnum1 = parseInt(num1);\r\nnum2 = parseInt(num2);\r\nnum3 = parseInt(num3);\r\n\r\n// Verificar qual é o maior\r\nif (num1 >= num2 && num1 >= num3) {\r\n    console.log(\"O maior número é:\", num1);\r\n} else if (num2 >= num1 && num2 >= num3) {\r\n    console.log(\"O maior número é:\", num2);\r\n} else {\r\n    console.log(\"O maior número é:\", num3);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicitar três números ao usuário\r\nnum1 = int(input(\"Digite o primeiro número: \"))\r\nnum2 = int(input(\"Digite o segundo número: \"))\r\nnum3 = int(input(\"Digite o terceiro número: \"))\r\n\r\n# Verificar qual é o maior\r\nif num1 >= num2 and num1 >= num3:\r\n    print(\"O maior número é:\", num1)\r\nelif num2 >= num1 and num2 >= num3:\r\n    print(\"O maior número é:\", num2)\r\nelse:\r\n    print(\"O maior número é:\", num3)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicitar três números ao usuário\r\nnum1 = int(input(\"Digite o primeiro número: \"))\r\nnum2 = int(input(\"Digite o segundo número: \"))\r\nnum3 = int(input(\"Digite o terceiro número: \"))\r\n\r\n# Verificar qual é o maior\r\nif num1 >= num2 and num1 >= num3:\r\n    print(\"O maior número é:\", num1)\r\nelif num2 >= num1 and num2 >= num3:\r\n    print(\"O maior número é:\", num2)\r\nelse:\r\n    print(\"O maior número é:\", num3)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONDITIONS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>5 8 3</input>\r\n        <expectedOutput>8</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12 12 10</input>\r\n        <expectedOutput>12</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7 7 7</input>\r\n        <expectedOutput>7</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1 2 3</input>\r\n        <expectedOutput>3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9 5 4</input>\r\n        <expectedOutput>9</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0 0 0</input>\r\n        <expectedOutput>0</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-1 -2 -3</input>\r\n        <expectedOutput>-1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10 20 15</input>\r\n        <expectedOutput>20</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3 3 3</input>\r\n        <expectedOutput>3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-5 -2 -8</input>\r\n        <expectedOutput>-2</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "19-palavra",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar palavras em uma frase</title>\r\n    <description>Crie um programa que solicite ao usuário uma frase e conte quantas palavras ela contém. Esse exercício tem como objetivo ensinar como manipular strings e usar funções de divisão em diferentes linguagens de programação.</description>\r\n    \r\n    <objective>Ensinar como contar o número de palavras em uma frase fornecida pelo usuário, utilizando funções de manipulação de strings e conceitos de arrays ou listas em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia uma frase fornecida pelo usuário e conte quantas palavras ela contém. O programa deve considerar que as palavras são separadas por espaços em branco.\r\n    </task>\r\n    <explanation>Para resolver este problema, o programa deve usar a função de dividir a string com base nos espaços em branco e depois contar o número de elementos no resultado. Se a frase estiver vazia, o programa deve retornar zero.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber uma frase como entrada.</inputFormat>\r\n    \r\n    <inputExample>O sol brilha no céu</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o número de palavras presentes na frase.</outputFormat>\r\n    \r\n    <outputExample>5</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicitar uma frase ao usuário\r\n$frase = readline(\"Digite uma frase: \");\r\n\r\n// Dividir a frase em palavras e contar o número de palavras\r\n$palavras = explode(\" \", $frase);\r\necho \"A frase contém \" . count($palavras) . \" palavras.\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet frase = prompt(\"Digite uma frase:\");\r\n\r\n// Dividir a frase em palavras e contar o número de palavras\r\nlet palavras = frase.split(\" \");\r\nconsole.log(\"A frase contém \" + palavras.length + \" palavras.\");\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicitar uma frase ao usuário\r\nfrase = input(\"Digite uma frase: \")\r\n\r\n# Dividir a frase em palavras e contar o número de palavras\r\npalavras = frase.split()\r\nprint(f\"A frase contém {len(palavras)} palavras.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicitar uma frase ao usuário\r\nfrase = input(\"Digite uma frase: \")\r\n\r\n# Dividir a frase em palavras e contar o número de palavras\r\npalavras = frase.split()\r\nprint(f\"A frase contém {len(palavras)} palavras.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>O sol brilha no céu</input>\r\n        <expectedOutput>5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu amo programação</input>\r\n        <expectedOutput>3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>   </input>\r\n        <expectedOutput>0</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Olá, como você está?</input>\r\n        <expectedOutput>4</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Texto com   espaços extras</input>\r\n        <expectedOutput>4</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Bem-vindo à nossa plataforma</input>\r\n        <expectedOutput>5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>programação é divertida</input>\r\n        <expectedOutput>3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Conte as palavras de minha frase</input>\r\n        <expectedOutput>6</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Testando um, dois, três</input>\r\n        <expectedOutput>4</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>   Teste   com   espaços  duplos   </input>\r\n        <expectedOutput>5</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "20-ordenar",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Ordenar três números</title>\r\n    <description>Crie um programa que solicite três números ao usuário e os imprima em ordem crescente. Esse exercício visa ensinar a manipular e ordenar números em diferentes linguagens de programação.</description>\r\n    \r\n    <objective>Ensinar a ordenar números em ordem crescente utilizando estruturas de controle e funções de ordenação em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia três números fornecidos pelo usuário e os imprima em ordem crescente. O programa deve ser capaz de comparar os números e organizá-los da menor para a maior.\r\n    </task>\r\n    <explanation>Para resolver este problema, o programa deve receber três números e ordená-los utilizando a comparação entre eles. O algoritmo pode utilizar a troca de valores ou funções de ordenação incorporadas nas linguagens.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber três números inteiros como entrada.</inputFormat>\r\n    \r\n    <inputExample>5, 2, 8</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir os três números em ordem crescente.</outputFormat>\r\n    \r\n    <outputExample>2, 5, 8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicitar três números ao usuário\r\n$num1 = (int)readline(\"Digite o primeiro número: \");\r\n$num2 = (int)readline(\"Digite o segundo número: \");\r\n$num3 = (int)readline(\"Digite o terceiro número: \");\r\n\r\n// Ordenar os números em ordem crescente\r\n$numeros = array($num1, $num2, $num3);\r\nsort($numeros);\r\n\r\n// Exibir os números ordenados\r\necho \"Os números em ordem crescente são: \" . implode(\", \", $numeros);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet num1 = parseInt(prompt(\"Digite o primeiro número:\"));\r\nlet num2 = parseInt(prompt(\"Digite o segundo número:\"));\r\nlet num3 = parseInt(prompt(\"Digite o terceiro número:\"));\r\n\r\n// Ordenar os números em ordem crescente\r\nlet numeros = [num1, num2, num3];\r\nnumeros.sort((a, b) => a - b);\r\n\r\n// Exibir os números ordenados\r\nconsole.log(\"Os números em ordem crescente são: \" + numeros.join(\", \"));\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicitar três números ao usuário\r\nnum1 = int(input(\"Digite o primeiro número: \"))\r\nnum2 = int(input(\"Digite o segundo número: \"))\r\nnum3 = int(input(\"Digite o terceiro número: \"))\r\n\r\n# Ordenar os números em ordem crescente\r\nnumeros = [num1, num2, num3]\r\nnumeros.sort()\r\n\r\n# Exibir os números ordenados\r\nprint(f\"Os números em ordem crescente são: {', '.join(map(str, numeros))}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicitar três números ao usuário\r\nnum1 = int(input(\"Digite o primeiro número: \"))\r\nnum2 = int(input(\"Digite o segundo número: \"))\r\nnum3 = int(input(\"Digite o terceiro número: \"))\r\n\r\n# Ordenar os números em ordem crescente\r\nnumeros = [num1, num2, num3]\r\nnumeros.sort()\r\n\r\n# Exibir os números ordenados\r\nprint(f\"Os números em ordem crescente são: {', '.join(map(str, numeros))}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>5, 2, 8</input>\r\n        <expectedOutput>2, 5, 8</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 15, 12</input>\r\n        <expectedOutput>10, 12, 15</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1, 1, 1</input>\r\n        <expectedOutput>1, 1, 1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3, 3, 2</input>\r\n        <expectedOutput>2, 3, 3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 50, 75</input>\r\n        <expectedOutput>50, 75, 100</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 7, 10</input>\r\n        <expectedOutput>7, 9, 10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>20, 20, 10</input>\r\n        <expectedOutput>10, 20, 20</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50, 10, 30</input>\r\n        <expectedOutput>10, 30, 50</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5, 7, 5</input>\r\n        <expectedOutput>5, 5, 7</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1, 2, 3</input>\r\n        <expectedOutput>1, 2, 3</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "21-palavra",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se uma palavra existe em uma frase</title>\r\n    <description>Crie um programa que solicite uma frase e uma palavra, e verifique se a palavra está presente na frase. Esse exercício ensina como trabalhar com strings e fazer buscas dentro delas, um conceito importante em várias linguagens de programação.</description>\r\n    \r\n    <objective>Ensinar a buscar uma palavra em uma frase e retornar um resultado booleano, utilizando funções de manipulação de strings e pesquisa de substrings.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia uma frase e uma palavra fornecidas pelo usuário, e verifique se a palavra está presente na frase. O código deve retornar um resultado que indique se a palavra foi encontrada ou não.\r\n    </task>\r\n    <explanation>Para resolver esse problema, o programa deve procurar pela palavra dentro da frase utilizando métodos de manipulação de strings. O algoritmo pode utilizar funções como `in` em Python, `indexOf` em JavaScript ou `strpos` em PHP para fazer essa busca.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber uma frase e uma palavra como entrada.</inputFormat>\r\n    \r\n    <inputExample>\"Eu gosto de programar\", \"programar\"</inputExample>\r\n    \r\n    <outputFormat>O programa deve retornar uma mensagem indicando se a palavra foi encontrada ou não na frase.</outputFormat>\r\n    \r\n    <outputExample>\"A palavra 'programar' está presente na frase.\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicitar a frase e a palavra ao usuário\r\n$frase = readline(\"Digite uma frase: \");\r\n$palavra = readline(\"Digite a palavra que deseja procurar: \");\r\n\r\n// Verificar se a palavra está presente na frase\r\nif (strpos($frase, $palavra) !== false) {\r\n    echo \"A palavra '{$palavra}' está presente na frase.\";\r\n} else {\r\n    echo \"A palavra '{$palavra}' não está presente na frase.\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet frase = prompt(\"Digite uma frase:\");\r\nlet palavra = prompt(\"Digite a palavra que deseja procurar:\");\r\n\r\n// Verificar se a palavra está presente na frase\r\nif (frase.includes(palavra)) {\r\n    console.log(`A palavra '${palavra}' está presente na frase.`);\r\n} else {\r\n    console.log(`A palavra '${palavra}' não está presente na frase.`);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicitar a frase e a palavra ao usuário\r\nfrase = input(\"Digite uma frase: \")\r\npalavra = input(\"Digite a palavra que deseja procurar: \")\r\n\r\n# Verificar se a palavra está presente na frase\r\nif palavra in frase:\r\n    print(f\"A palavra '{palavra}' está presente na frase.\")\r\nelse:\r\n    print(f\"A palavra '{palavra}' não está presente na frase.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicitar a frase e a palavra ao usuário\r\nfrase = input(\"Digite uma frase: \")\r\npalavra = input(\"Digite a palavra que deseja procurar: \")\r\n\r\n# Verificar se a palavra está presente na frase\r\nif palavra in frase:\r\n    print(f\"A palavra '{palavra}' está presente na frase.\")\r\nelse:\r\n    print(f\"A palavra '{palavra}' não está presente na frase.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>\"Eu gosto de programar\", \"programar\"</input>\r\n        <expectedOutput>\"A palavra 'programar' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"A chuva está forte\", \"sol\"</input>\r\n        <expectedOutput>\"A palavra 'sol' não está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"Eu adoro estudar programação\", \"estudar\"</input>\r\n        <expectedOutput>\"A palavra 'estudar' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"A casa é grande\", \"pequena\"</input>\r\n        <expectedOutput>\"A palavra 'pequena' não está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"O céu está limpo\", \"céu\"</input>\r\n        <expectedOutput>\"A palavra 'céu' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"Vamos ao cinema hoje\", \"restaurante\"</input>\r\n        <expectedOutput>\"A palavra 'restaurante' não está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"Ele gosta de futebol\", \"futebol\"</input>\r\n        <expectedOutput>\"A palavra 'futebol' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"A noite está fria\", \"fria\"</input>\r\n        <expectedOutput>\"A palavra 'fria' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"O cachorro está latindo\", \"gato\"</input>\r\n        <expectedOutput>\"A palavra 'gato' não está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>\"Eu estou aprendendo a programar\", \"aprender\"</input>\r\n        <expectedOutput>\"A palavra 'aprender' está presente na frase.\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "22-divisao 3",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Contar os números de 1 a 100 divisíveis por 3</title>\r\n    <description>Crie um programa que conte quantos números entre 1 e 100 são divisíveis por 3. Este exercício auxilia na compreensão de operações matemáticas simples e no uso de estruturas de repetição, como loops.</description>\r\n    \r\n    <objective>Ensinar a utilizar loops para realizar contagens e verificar divisibilidade, conceitos importantes na programação de algoritmos.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que conte quantos números entre 1 e 100 são divisíveis por 3. O código deve usar um loop para percorrer os números e verificar a divisibilidade.\r\n    </task>\r\n    <explanation>Este problema envolve a utilização de um loop para iterar de 1 a 100 e, em cada iteração, verificar se o número atual é divisível por 3. Isso pode ser feito utilizando a operação de módulo.</explanation>\r\n    \r\n    <inputFormat>Não há entrada de dados para esta questão. O programa deve contar os números divisíveis por 3 entre 1 e 100.</inputFormat>\r\n    \r\n    <inputExample>''</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a quantidade de números divisíveis por 3 entre 1 e 100.</outputFormat>\r\n    \r\n    <outputExample>\"33\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Inicializa a contagem\r\n$count = 0;\r\n\r\n// Loop de 1 a 100\r\nfor ($i = 1; $i <= 100; $i++) {\r\n    if ($i % 3 == 0) {\r\n        $count++;\r\n    }\r\n}\r\n\r\n// Imprimir o resultado\r\necho \"Quantidade de números divisíveis por 3: \" . $count;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet count = 0;\r\n\r\n// Loop de 1 a 100\r\nfor (let i = 1; i <= 100; i++) {\r\n    if (i % 3 === 0) {\r\n        count++;\r\n    }\r\n}\r\n\r\n// Imprimir o resultado\r\nconsole.log(\"Quantidade de números divisíveis por 3:\", count);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Inicializa a contagem\r\ncount = 0\r\n\r\n# Loop de 1 a 100\r\nfor i in range(1, 101):\r\n    if i % 3 == 0:\r\n        count += 1\r\n\r\n# Imprimir o resultado\r\nprint(\"Quantidade de números divisíveis por 3:\", count)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Inicializa a contagem\r\ncount = 0\r\n\r\n# Loop de 1 a 100\r\nfor i in range(1, 101):\r\n    if i % 3 == 0:\r\n        count += 1\r\n\r\n# Imprimir o resultado\r\nprint(\"Quantidade de números divisíveis por 3:\", count)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input></input>\r\n        <expectedOutput>\"Quantidade de números divisíveis por 3: 33\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "23-ano bissexto",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se um ano é bissexto</title>\r\n    <description>Crie um programa que verifique se um ano é bissexto. Um ano é bissexto se for divisível por 4, mas não divisível por 100, exceto se for divisível por 400. Este exercício ajuda na compreensão de operações aritméticas e de como lidar com condições complexas.</description>\r\n    \r\n    <objective>Ensinar o uso de condições (if/else) para verificar se um ano é bissexto, um conceito importante para entender algoritmos que envolvem cálculo de datas.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que determine se um ano é bissexto. O código deve verificar a divisibilidade do ano por 4, 100 e 400 para decidir se ele é bissexto ou não.\r\n    </task>\r\n    <explanation>Um ano é bissexto se ele for divisível por 4, mas não por 100, a menos que seja divisível por 400. Isso pode ser resolvido utilizando operadores de módulo para verificar as condições.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro representando um ano.</inputFormat>\r\n    \r\n    <inputExample>2024</inputExample>\r\n    \r\n    <outputFormat>O programa deve informar se o ano é bissexto ou não.</outputFormat>\r\n    \r\n    <outputExample>\"2024 é um ano bissexto.\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o ano ao usuário\r\n$ano = 2024;\r\n\r\n// Verifica se o ano é bissexto\r\nif (($ano % 4 == 0 && $ano % 100 != 0) || ($ano % 400 == 0)) {\r\n    echo $ano . \" é um ano bissexto.\";\r\n} else {\r\n    echo $ano . \" não é um ano bissexto.\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet ano = 2024;\r\n\r\n// Verifica se o ano é bissexto\r\nif ((ano % 4 === 0 && ano % 100 !== 0) || (ano % 400 === 0)) {\r\n    console.log(`${ano} é um ano bissexto.`);\r\n} else {\r\n    console.log(`${ano} não é um ano bissexto.`);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o ano ao usuário\r\nano = 2024\r\n\r\n# Verifica se o ano é bissexto\r\nif (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):\r\n    print(f\"{ano} é um ano bissexto.\")\r\nelse:\r\n    print(f\"{ano} não é um ano bissexto.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o ano ao usuário\r\nano = 2024\r\n\r\n# Verifica se o ano é bissexto\r\nif (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):\r\n    print(f\"{ano} é um ano bissexto.\")\r\nelse:\r\n    print(f\"{ano} não é um ano bissexto.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONDITIONS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>2024</input>\r\n        <expectedOutput>\"2024 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1900</input>\r\n        <expectedOutput>\"1900 não é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2000</input>\r\n        <expectedOutput>\"2000 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2023</input>\r\n        <expectedOutput>\"2023 não é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2004</input>\r\n        <expectedOutput>\"2004 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2100</input>\r\n        <expectedOutput>\"2100 não é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2400</input>\r\n        <expectedOutput>\"2400 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1996</input>\r\n        <expectedOutput>\"1996 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1800</input>\r\n        <expectedOutput>\"1800 não é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2020</input>\r\n        <expectedOutput>\"2020 é um ano bissexto.\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "24-soma impar",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Soma de números ímpares</title>\r\n    <description>Crie um programa que solicite ao usuário um número inteiro N e calcule a soma de todos os números ímpares de 1 até N. Este exercício ensina a trabalhar com loops e condições para iterar sobre uma sequência de números e filtrar os ímpares.</description>\r\n    \r\n    <objective>Ensinar a utilização de laços de repetição (loops) e condições para filtrar números ímpares e somá-los até um valor N fornecido pelo usuário.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que calcule a soma de todos os números ímpares de 1 até um número N fornecido pelo usuário. O código deve usar um loop para iterar de 1 até N e verificar se o número é ímpar, somando-os quando for o caso.\r\n    </task>\r\n    <explanation>O código deve utilizar um laço (como um \"for\" ou \"while\") para iterar de 1 até N, e dentro do laço verificar se o número é ímpar utilizando a condição (número % 2 != 0). A soma de todos os números ímpares deve ser acumulada em uma variável.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro N.</inputFormat>\r\n    \r\n    <inputExample>10</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a soma dos números ímpares entre 1 e N.</outputFormat>\r\n    \r\n    <outputExample>\"A soma dos números ímpares de 1 até 10 é 25.\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o número ao usuário\r\n$N = 10;\r\n$soma = 0;\r\n\r\n// Calcula a soma dos números ímpares\r\nfor ($i = 1; $i <= $N; $i++) {\r\n    if ($i % 2 != 0) {\r\n        $soma += $i;\r\n    }\r\n}\r\n\r\necho \"A soma dos números ímpares de 1 até $N é $soma.\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet N = 10;\r\nlet soma = 0;\r\n\r\n// Calcula a soma dos números ímpares\r\nfor (let i = 1; i <= N; i++) {\r\n    if (i % 2 !== 0) {\r\n        soma += i;\r\n    }\r\n}\r\n\r\nconsole.log(`A soma dos números ímpares de 1 até ${N} é ${soma}.`);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o número ao usuário\r\nN = 10\r\nsoma = 0\r\n\r\n# Calcula a soma dos números ímpares\r\nfor i in range(1, N+1):\r\n    if i % 2 != 0:\r\n        soma += i\r\n\r\nprint(f\"A soma dos números ímpares de 1 até {N} é {soma}.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o número ao usuário\r\nN = 10\r\nsoma = 0\r\n\r\n# Calcula a soma dos números ímpares\r\nfor i in range(1, N+1):\r\n    if i % 2 != 0:\r\n        soma += i\r\n\r\nprint(f\"A soma dos números ímpares de 1 até {N} é {soma}.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 10 é 25.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 5 é 9.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 1 é 1.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 15 é 64.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>20</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 20 é 100.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>30</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 30 é 225.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 50 é 625.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 7 é 16.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 8 é 16.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12</input>\r\n        <expectedOutput>\"A soma dos números ímpares de 1 até 12 é 36.\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "25-menor numero",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Encontrar o menor número entre dois números</title>\r\n    <description>Crie um programa que solicite ao usuário dois números inteiros e determine qual é o menor entre eles. Este exercício ensina a utilizar estruturas condicionais para comparar valores.</description>\r\n    \r\n    <objective>Ensinar o uso de estruturas condicionais (como if-else) para comparar dois números e determinar o menor entre eles.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia dois números inteiros e determine qual é o menor número. O código deve usar uma estrutura condicional para comparar os dois valores e imprimir o menor número.\r\n    </task>\r\n    <explanation>O código deve usar uma estrutura condicional (if-else) para verificar qual dos dois números é o menor. Caso os números sejam iguais, o programa pode informar que ambos são iguais.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros.</inputFormat>\r\n    \r\n    <inputExample>5, 8</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o menor número entre os dois.</outputFormat>\r\n    \r\n    <outputExample>\"O menor número é 5.\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita os dois números ao usuário\r\n$num1 = 5;\r\n$num2 = 8;\r\n\r\n// Verifica qual é o menor número\r\nif ($num1 < $num2) {\r\n    echo \"O menor número é $num1.\";\r\n} elseif ($num1 > $num2) {\r\n    echo \"O menor número é $num2.\";\r\n} else {\r\n    echo \"Os números são iguais.\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet num1 = 5;\r\nlet num2 = 8;\r\n\r\n// Verifica qual é o menor número\r\nif (num1 < num2) {\r\n    console.log(`O menor número é ${num1}.`);\r\n} else if (num1 > num2) {\r\n    console.log(`O menor número é ${num2}.`);\r\n} else {\r\n    console.log(\"Os números são iguais.\");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita os dois números ao usuário\r\nnum1 = 5\r\nnum2 = 8\r\n\r\n# Verifica qual é o menor número\r\nif num1 < num2:\r\n    print(f\"O menor número é {num1}.\")\r\nelif num1 > num2:\r\n    print(f\"O menor número é {num2}.\")\r\nelse:\r\n    print(\"Os números são iguais.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita os dois números ao usuário\r\nnum1 = 5\r\nnum2 = 8\r\n\r\n# Verifica qual é o menor número\r\nif num1 < num2:\r\n    print(f\"O menor número é {num1}.\")\r\nelif num1 > num2:\r\n    print(f\"O menor número é {num2}.\")\r\nelse:\r\n    print(\"Os números são iguais.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>CONDITIONS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>5, 8</input>\r\n        <expectedOutput>\"O menor número é 5.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 3</input>\r\n        <expectedOutput>\"O menor número é 3.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 7</input>\r\n        <expectedOutput>\"Os números são iguais.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0, -5</input>\r\n        <expectedOutput>\"O menor número é -5.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-10, -15</input>\r\n        <expectedOutput>\"O menor número é -15.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 50</input>\r\n        <expectedOutput>\"O menor número é 50.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25, 25</input>\r\n        <expectedOutput>\"Os números são iguais.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1, 3</input>\r\n        <expectedOutput>\"O menor número é 1.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 4</input>\r\n        <expectedOutput>\"O menor número é 4.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>-3, 2</input>\r\n        <expectedOutput>\"O menor número é -3.\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "26-area triangulo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Calcular a área de um triângulo</title>\r\n    <description>Crie um programa que solicite ao usuário a base e a altura de um triângulo e calcule a sua área. Este exercício ensina o uso de variáveis e a aplicação de fórmulas matemáticas em programação.</description>\r\n    \r\n    <objective>Ensinar a calcular a área de um triângulo utilizando a fórmula: área = (base * altura) / 2. Este exercício também envolve o uso de entrada de dados e saída de resultados no código.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia os valores de base e altura de um triângulo e calcule sua área. A fórmula para calcular a área de um triângulo é: (base * altura) / 2.\r\n    </task>\r\n    <explanation>A fórmula para calcular a área de um triângulo é bastante simples: a área é igual à multiplicação da base pela altura, dividida por 2. O programa deve pedir ao usuário esses dois valores e calcular o resultado.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números: a base e a altura do triângulo.</inputFormat>\r\n    \r\n    <inputExample>5, 8</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o valor da área do triângulo.</outputFormat>\r\n    \r\n    <outputExample>\"A área do triângulo é 20.\"</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita a base e a altura do triângulo\r\n$base = 5;\r\n$altura = 8;\r\n\r\n// Calcula a área do triângulo\r\n$area = ($base * $altura) / 2;\r\n\r\n// Imprime a área\r\necho \"A área do triângulo é \" . $area . \".\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet base = 5;\r\nlet altura = 8;\r\n\r\n// Calcula a área do triângulo\r\nlet area = (base * altura) / 2;\r\n\r\n// Imprime a área\r\nconsole.log(`A área do triângulo é ${area}.`);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita a base e a altura do triângulo\r\nbase = 5\r\naltura = 8\r\n\r\n# Calcula a área do triângulo\r\narea = (base * altura) / 2\r\n\r\n# Imprime a área\r\nprint(f\"A área do triângulo é {area}.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita a base e a altura do triângulo\r\nbase = 5\r\naltura = 8\r\n\r\n# Calcula a área do triângulo\r\narea = (base * altura) / 2\r\n\r\n# Imprime a área\r\nprint(f\"A área do triângulo é {area}.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>6</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>5, 8</input>\r\n        <expectedOutput>\"A área do triângulo é 20.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 5</input>\r\n        <expectedOutput>\"A área do triângulo é 25.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 3</input>\r\n        <expectedOutput>\"A área do triângulo é 10.5.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>6, 4</input>\r\n        <expectedOutput>\"A área do triângulo é 12.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 6</input>\r\n        <expectedOutput>\"A área do triângulo é 27.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12, 10</input>\r\n        <expectedOutput>\"A área do triângulo é 60.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15, 2</input>\r\n        <expectedOutput>\"A área do triângulo é 15.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>4, 8</input>\r\n        <expectedOutput>\"A área do triângulo é 16.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5, 5</input>\r\n        <expectedOutput>\"A área do triângulo é 12.5.\"</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3, 7</input>\r\n        <expectedOutput>\"A área do triângulo é 10.5.\"</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "27- repetir palavra",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Repetir uma palavra N vezes</title>\r\n    <description>Crie um programa que solicite ao usuário uma palavra e um número N, e repita a palavra N vezes. Este exercício envolve o uso de loops e entrada de dados em programação.</description>\r\n    \r\n    <objective>Ensinar o uso de loops (laços de repetição) para realizar uma tarefa repetitiva, além de trabalhar com entrada de dados fornecida pelo usuário.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia uma palavra e um número inteiro N, e imprima a palavra repetida N vezes. A tarefa ajuda a praticar a utilização de loops para repetição de ações.\r\n    </task>\r\n    <explanation>Para resolver essa questão, o programa deve usar um loop para imprimir a palavra fornecida pelo usuário, o número de vezes determinado por N. O laço de repetição será controlado pela variável N.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber uma palavra e um número inteiro N.</inputFormat>\r\n    \r\n    <inputExample>palavra, 3</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a palavra repetida N vezes, cada repetição em uma nova linha.</outputFormat>\r\n    \r\n    <outputExample>palavra\r\npalavra\r\npalavra</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita a palavra e o número N\r\n$palavra = \"palavra\";\r\n$n = 3;\r\n\r\n// Repete a palavra N vezes\r\nfor ($i = 0; $i < $n; $i++) {\r\n    echo $palavra . \"\\n\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet palavra = \"palavra\";\r\nlet n = 3;\r\n\r\n// Repete a palavra N vezes\r\nfor (let i = 0; i < n; i++) {\r\n    console.log(palavra);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita a palavra e o número N\r\npalavra = \"palavra\"\r\nn = 3\r\n\r\n# Repete a palavra N vezes\r\nfor i in range(n):\r\n    print(palavra)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita a palavra e o número N\r\npalavra = \"palavra\"\r\nn = 3\r\n\r\n# Repete a palavra N vezes\r\nfor i in range(n):\r\n    print(palavra)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>palavra, 3</input>\r\n        <expectedOutput>palavra\r\npalavra\r\npalavra</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>teste, 2</input>\r\n        <expectedOutput>teste\r\nteste</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>hello, 5</input>\r\n        <expectedOutput>hello\r\nhello\r\nhello\r\nhello\r\nhello</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>abc, 4</input>\r\n        <expectedOutput>abc\r\nabc\r\nabc\r\nabc</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>programa, 1</input>\r\n        <expectedOutput>programa</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>repetir, 6</input>\r\n        <expectedOutput>repetir\r\nrepetir\r\nrepetir\r\nrepetir\r\nrepetir\r\nrepetir</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>code, 3</input>\r\n        <expectedOutput>code\r\ncode\r\ncode</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>python, 2</input>\r\n        <expectedOutput>python\r\npython</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>loop, 7</input>\r\n        <expectedOutput>loop\r\nloop\r\nloop\r\nloop\r\nloop\r\nloop\r\nloop</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>word, 8</input>\r\n        <expectedOutput>word\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword\r\nword</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "28-potencia",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Calcular a potência de um número</title>\r\n    <description>Crie um programa que solicite ao usuário dois números e calcule o primeiro elevado à potência do segundo. Este exercício envolve o uso de operações matemáticas e entrada de dados em programação.</description>\r\n    \r\n    <objective>Ensinar o uso de operações matemáticas em programação, como a exponenciação, além de trabalhar com a entrada de dados fornecida pelo usuário.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia dois números: o primeiro, que será a base, e o segundo, que será o expoente. O programa deve calcular o resultado da base elevada à potência do expoente.\r\n    </task>\r\n    <explanation>Para resolver essa questão, o programa deve utilizar a operação de exponenciação para calcular a base elevada ao expoente fornecido pelo usuário. Isso pode ser feito de maneira simples utilizando operadores matemáticos.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros: o primeiro será a base e o segundo será o expoente.</inputFormat>\r\n    \r\n    <inputExample>2, 3</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o resultado da base elevada ao expoente.</outputFormat>\r\n    \r\n    <outputExample>8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita a base e o expoente\r\n$base = 2;\r\n$expoente = 3;\r\n\r\n// Calcula a potência\r\n$resultado = pow($base, $expoente);\r\n\r\n// Exibe o resultado\r\necho $resultado;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet base = 2;\r\nlet expoente = 3;\r\n\r\n// Calcula a potência\r\nlet resultado = Math.pow(base, expoente);\r\n\r\n// Exibe o resultado\r\nconsole.log(resultado);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita a base e o expoente\r\nbase = 2\r\nexpoente = 3\r\n\r\n# Calcula a potência\r\nresultado = base ** expoente\r\n\r\n# Exibe o resultado\r\nprint(resultado)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita a base e o expoente\r\nbase = 2\r\nexpoente = 3\r\n\r\n# Calcula a potência\r\nresultado = base ** expoente\r\n\r\n# Exibe o resultado\r\nprint(resultado)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>2, 3</input>\r\n        <expectedOutput>8</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5, 2</input>\r\n        <expectedOutput>25</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 3</input>\r\n        <expectedOutput>1000</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>3, 4</input>\r\n        <expectedOutput>81</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 2</input>\r\n        <expectedOutput>49</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>6, 3</input>\r\n        <expectedOutput>216</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8, 2</input>\r\n        <expectedOutput>64</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>4, 5</input>\r\n        <expectedOutput>1024</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 0</input>\r\n        <expectedOutput>1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2, 10</input>\r\n        <expectedOutput>1024</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "29-multiplo",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se um número é múltiplo de outro</title>\r\n    <description>Crie um programa que solicite ao usuário dois números e verifique se o primeiro é múltiplo do segundo. Este exercício permite praticar o uso de operações matemáticas e controle de fluxo.</description>\r\n    \r\n    <objective>Ensinar a utilização de operações matemáticas e condicionais para verificar se um número é múltiplo de outro, além de trabalhar com a entrada de dados em programação.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia dois números: o primeiro e o segundo. O programa deve verificar se o primeiro número é múltiplo do segundo. Um número é múltiplo de outro quando, ao ser dividido, o resto da divisão é zero.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o programa deve usar o operador de módulo (%) para calcular o resto da divisão entre o primeiro número e o segundo. Se o resto for zero, então o primeiro número é múltiplo do segundo.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros: o primeiro será o número a ser verificado e o segundo será o número pelo qual o primeiro será dividido.</inputFormat>\r\n    \r\n    <inputExample>10, 5</inputExample>\r\n    \r\n    <outputFormat>O programa deve informar se o primeiro número é múltiplo do segundo.</outputFormat>\r\n    \r\n    <outputExample>10 é múltiplo de 5</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita os dois números\r\n$numero1 = 10;\r\n$numero2 = 5;\r\n\r\n// Verifica se o primeiro número é múltiplo do segundo\r\nif ($numero1 % $numero2 == 0) {\r\n    echo \"$numero1 é múltiplo de $numero2\";\r\n} else {\r\n    echo \"$numero1 não é múltiplo de $numero2\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero1 = 10;\r\nlet numero2 = 5;\r\n\r\n// Verifica se o primeiro número é múltiplo do segundo\r\nif (numero1 % numero2 === 0) {\r\n    console.log(`${numero1} é múltiplo de ${numero2}`);\r\n} else {\r\n    console.log(`${numero1} não é múltiplo de ${numero2}`);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 10\r\nnumero2 = 5\r\n\r\n# Verifica se o primeiro número é múltiplo do segundo\r\nif numero1 % numero2 == 0:\r\n    print(f\"{numero1} é múltiplo de {numero2}\")\r\nelse:\r\n    print(f\"{numero1} não é múltiplo de {numero2}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 10\r\nnumero2 = 5\r\n\r\n# Verifica se o primeiro número é múltiplo do segundo\r\nif numero1 % numero2 == 0:\r\n    print(f\"{numero1} é múltiplo de {numero2}\")\r\nelse:\r\n    print(f\"{numero1} não é múltiplo de {numero2}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>10, 5</input>\r\n        <expectedOutput>10 é múltiplo de 5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 3</input>\r\n        <expectedOutput>7 não é múltiplo de 3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25, 5</input>\r\n        <expectedOutput>25 é múltiplo de 5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>18, 6</input>\r\n        <expectedOutput>18 é múltiplo de 6</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 10</input>\r\n        <expectedOutput>100 é múltiplo de 10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15, 4</input>\r\n        <expectedOutput>15 não é múltiplo de 4</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12, 3</input>\r\n        <expectedOutput>12 é múltiplo de 3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 3</input>\r\n        <expectedOutput>9 é múltiplo de 3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8, 2</input>\r\n        <expectedOutput>8 é múltiplo de 2</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>14, 4</input>\r\n        <expectedOutput>14 não é múltiplo de 4</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "30-entre numeros",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Imprimir números pares entre dois números</title>\r\n    <description>Crie um programa que solicite ao usuário dois números e imprima todos os números pares entre eles. Este exercício ensina como usar estruturas de repetição e condicionais para filtrar números.</description>\r\n    \r\n    <objective>Ensinar a utilização de estruturas de repetição (como o laço for) e condicionais (como if) para identificar e imprimir números pares dentro de um intervalo.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia dois números inteiros: o primeiro e o segundo. O programa deve imprimir todos os números pares entre esses dois números, inclusive, se o primeiro número for menor que o segundo. Se o intervalo for inverso, o programa deve imprimir os números pares de forma decrescente.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o programa deve utilizar um laço de repetição para percorrer os números no intervalo fornecido e um comando condicional para verificar se cada número é par, ou seja, se o resto da divisão dele por 2 é zero.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros: o primeiro será o limite inferior e o segundo o limite superior do intervalo.</inputFormat>\r\n    \r\n    <inputExample>5, 15</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir todos os números pares entre os dois números fornecidos.</outputFormat>\r\n    \r\n    <outputExample>6, 8, 10, 12, 14</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita os dois números\r\n$numero1 = 5;\r\n$numero2 = 15;\r\n\r\n// Verifica qual é o limite superior e inferior\r\n$inicio = min($numero1, $numero2);\r\n$fim = max($numero1, $numero2);\r\n\r\n// Imprime os números pares\r\nfor ($i = $inicio; $i <= $fim; $i++) {\r\n    if ($i % 2 == 0) {\r\n        echo $i . \" \";\r\n    }\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero1 = 5;\r\nlet numero2 = 15;\r\n\r\n// Verifica qual é o limite superior e inferior\r\nlet inicio = Math.min(numero1, numero2);\r\nlet fim = Math.max(numero1, numero2);\r\n\r\n// Imprime os números pares\r\nfor (let i = inicio; i <= fim; i++) {\r\n    if (i % 2 === 0) {\r\n        console.log(i);\r\n    }\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 5\r\nnumero2 = 15\r\n\r\n# Verifica qual é o limite superior e inferior\r\ninicio = min(numero1, numero2)\r\nfim = max(numero1, numero2)\r\n\r\n# Imprime os números pares\r\nfor i in range(inicio, fim + 1):\r\n    if i % 2 == 0:\r\n        print(i)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 5\r\nnumero2 = 15\r\n\r\n# Verifica qual é o limite superior e inferior\r\ninicio = min(numero1, numero2)\r\nfim = max(numero1, numero2)\r\n\r\n# Imprime os números pares\r\nfor i in range(inicio, fim + 1):\r\n    if i % 2 == 0:\r\n        print(i)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n<testCases>\r\n    <testCase>\r\n        <input>5, 15</input>\r\n        <expectedOutput>6, 8, 10, 12, 14</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 20</input>\r\n        <expectedOutput>10, 12, 14, 16, 18, 20</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>30, 25</input>\r\n        <expectedOutput>30, 28, 26</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1, 10</input>\r\n        <expectedOutput>2, 4, 6, 8, 10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15, 5</input>\r\n        <expectedOutput>14, 12, 10, 8, 6</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12, 18</input>\r\n        <expectedOutput>12, 14, 16, 18</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25, 30</input>\r\n        <expectedOutput>30, 28, 26</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 7</input>\r\n        <expectedOutput>''</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>0, 5</input>\r\n        <expectedOutput>0, 2, 4</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 110</input>\r\n        <expectedOutput>100, 102, 104, 106, 108, 110</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "31-divisao inteiro",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Divisão de dois números</title>\r\n    <description>Crie um programa que solicite dois números inteiros e calcule a divisão do primeiro pelo segundo, exibindo o quociente e o resto. Este exercício ajuda a entender o uso de operações matemáticas e como lidar com resultados de divisões inteiras.</description>\r\n    \r\n    <objective>Ensinar a utilização de operações matemáticas para dividir dois números inteiros e entender o conceito de quociente e resto.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia dois números inteiros, calcule a divisão do primeiro número pelo segundo e exiba tanto o quociente quanto o resto da divisão.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o programa deve realizar uma divisão inteira utilizando a operação de divisão e obter o resto utilizando o operador módulo. O resultado deve ser apresentado de forma clara para o usuário, incluindo tanto o quociente quanto o resto.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros: o primeiro será o numerador e o segundo será o denominador.</inputFormat>\r\n    \r\n    <inputExample>15, 4</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o quociente e o resto da divisão entre os dois números fornecidos.</outputFormat>\r\n    \r\n    <outputExample>Quociente: 3, Resto: 3</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita os dois números\r\n$numero1 = 15;\r\n$numero2 = 4;\r\n\r\n// Calcula o quociente e o resto\r\n$quociente = intdiv($numero1, $numero2);\r\n$resto = $numero1 % $numero2;\r\n\r\n// Exibe o resultado\r\necho \"Quociente: $quociente, Resto: $resto\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero1 = 15;\r\nlet numero2 = 4;\r\n\r\n// Calcula o quociente e o resto\r\nlet quociente = Math.floor(numero1 / numero2);\r\nlet resto = numero1 % numero2;\r\n\r\n// Exibe o resultado\r\nconsole.log(`Quociente: ${quociente}, Resto: ${resto}`);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 15\r\nnumero2 = 4\r\n\r\n# Calcula o quociente e o resto\r\nquociente = numero1 // numero2\r\nresto = numero1 % numero2\r\n\r\n# Exibe o resultado\r\nprint(f\"Quociente: {quociente}, Resto: {resto}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita os dois números\r\nnumero1 = 15\r\nnumero2 = 4\r\n\r\n# Calcula o quociente e o resto\r\nquociente = numero1 // numero2\r\nresto = numero1 % numero2\r\n\r\n# Exibe o resultado\r\nprint(f\"Quociente: {quociente}, Resto: {resto}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>15, 4</input>\r\n        <expectedOutput>Quociente: 3, Resto: 3</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10, 3</input>\r\n        <expectedOutput>Quociente: 3, Resto: 1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>9, 2</input>\r\n        <expectedOutput>Quociente: 4, Resto: 1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>20, 6</input>\r\n        <expectedOutput>Quociente: 3, Resto: 2</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8, 2</input>\r\n        <expectedOutput>Quociente: 4, Resto: 0</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 5</input>\r\n        <expectedOutput>Quociente: 1, Resto: 2</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 7</input>\r\n        <expectedOutput>Quociente: 14, Resto: 2</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>55, 10</input>\r\n        <expectedOutput>Quociente: 5, Resto: 5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>13, 4</input>\r\n        <expectedOutput>Quociente: 3, Resto: 1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>18, 5</input>\r\n        <expectedOutput>Quociente: 3, Resto: 3</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "32-conversao meses",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Converter idade de anos para meses</title>\r\n    <description>Crie um programa que solicite a idade de uma pessoa em anos e converta essa idade para meses. Este exercício ajuda a entender a conversão de unidades de tempo e como realizar operações simples de multiplicação.</description>\r\n    \r\n    <objective>Ensinar a conversão de unidades de tempo, especificamente a conversão de anos para meses, utilizando operações aritméticas simples.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia a idade de uma pessoa em anos e converta essa idade para meses. Sabemos que cada ano tem 12 meses, portanto a conversão é feita multiplicando a idade por 12.\r\n    </task>\r\n    <explanation>Para resolver esta questão, o programa deve multiplicar a idade fornecida em anos por 12 para obter o número de meses. O resultado será a idade equivalente em meses.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro representando a idade em anos.</inputFormat>\r\n    \r\n    <inputExample>5</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o número de meses equivalentes à idade fornecida.</outputFormat>\r\n    \r\n    <outputExample>60</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita a idade em anos\r\n$idadeEmAnos = 5;\r\n\r\n// Converte a idade para meses\r\n$idadeEmMeses = $idadeEmAnos * 12;\r\n\r\n// Exibe o resultado\r\necho \"A idade em meses é: $idadeEmMeses\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet idadeEmAnos = 5;\r\n\r\n// Converte a idade para meses\r\nlet idadeEmMeses = idadeEmAnos * 12;\r\n\r\n// Exibe o resultado\r\nconsole.log(`A idade em meses é: ${idadeEmMeses}`);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita a idade em anos\r\nidade_em_anos = 5\r\n\r\n# Converte a idade para meses\r\nidade_em_meses = idade_em_anos * 12\r\n\r\n# Exibe o resultado\r\nprint(f\"A idade em meses é: {idade_em_meses}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita a idade em anos\r\nidade_em_anos = 5\r\n\r\n# Converte a idade para meses\r\nidade_em_meses = idade_em_anos * 12\r\n\r\n# Exibe o resultado\r\nprint(f\"A idade em meses é: {idade_em_meses}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>5</input>\r\n        <expectedOutput>60</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>120</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2</input>\r\n        <expectedOutput>24</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7</input>\r\n        <expectedOutput>84</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>180</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12</input>\r\n        <expectedOutput>144</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>20</input>\r\n        <expectedOutput>240</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>30</input>\r\n        <expectedOutput>360</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>600</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100</input>\r\n        <expectedOutput>1200</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "33-sequencia",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Mostrar a sequência de números até N</title>\r\n    <description>Crie um programa que solicite um número N e imprima todos os números de 1 até N, incluindo N. Este exercício ajuda a entender o uso de laços de repetição e a manipulação de números em programação.</description>\r\n    \r\n    <objective>Ensinar o uso de laços de repetição (loops) para imprimir uma sequência de números até um valor fornecido pelo usuário.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia um número inteiro N e imprima todos os números de 1 até N, incluindo N. Para isso, é necessário utilizar um laço de repetição que percorre todos os números de 1 até N e os imprime.\r\n    </task>\r\n    <explanation>O programa deve usar um laço de repetição (como um loop for) para iterar de 1 até N, imprimindo cada número durante o processo. Isso ensina o uso básico de laços de repetição em programação.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro N.</inputFormat>\r\n    \r\n    <inputExample>5</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir todos os números de 1 até N, incluindo N, cada um em uma linha.</outputFormat>\r\n    \r\n    <outputExample>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n    </outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o número N\r\n$n = 5;\r\n\r\n// Imprime os números de 1 até N\r\nfor ($i = 1; $i <= $n; $i++) {\r\n    echo $i . \"\\n\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet n = 5;\r\n\r\n// Imprime os números de 1 até N\r\nfor (let i = 1; i <= n; i++) {\r\n    console.log(i);\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o número N\r\nn = 5\r\n\r\n# Imprime os números de 1 até N\r\nfor i in range(1, n + 1):\r\n    print(i)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o número N\r\nn = 5\r\n\r\n# Imprime os números de 1 até N\r\nfor i in range(1, n + 1):\r\n    print(i)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n            </expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>3</input>\r\n            <expectedOutput>\r\n1\r\n2\r\n3\r\n            </expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>8</input>\r\n            <expectedOutput>\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n            </expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>2</input>\r\n            <expectedOutput>\r\n1\r\n2\r\n            </expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "34-desconto",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Cálculo de descontos</title>\r\n    <description>Crie um programa que receba o preço de um produto e o valor do desconto (em percentual), e calcule o valor com o desconto aplicado. Este exercício ensina como realizar cálculos matemáticos simples e aplicar porcentagens.</description>\r\n    \r\n    <objective>Ensinar o cálculo de descontos, com base em um preço e um percentual fornecidos pelo usuário, aplicando a fórmula de desconto.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia o preço de um produto e o percentual de desconto, calcule o valor do desconto e subtraia esse valor do preço original para encontrar o preço final. O programa deve exibir o preço final após o desconto.\r\n    </task>\r\n    <explanation>O cálculo de descontos é realizado multiplicando o preço pelo percentual de desconto e depois subtraindo esse valor do preço original. A fórmula para o valor com desconto é: valor_com_desconto = preço - (preço * percentual_de_desconto / 100)\r\n    </explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois valores: o preço do produto (como número) e o percentual de desconto (como número).</inputFormat>\r\n    \r\n    <inputExample>100 20</inputExample>\r\n    \r\n    <outputFormat>O programa deve exibir o preço final após o desconto.</outputFormat>\r\n    \r\n    <outputExample>80</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o preço e o percentual de desconto\r\n$preco = 100;\r\n$desconto = 20;\r\n\r\n// Calcula o valor do desconto e o preço com o desconto\r\n$valorDesconto = $preco * ($desconto / 100);\r\n$precoFinal = $preco - $valorDesconto;\r\n\r\n// Exibe o preço final\r\necho \"Preço final: \" . $precoFinal;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet preco = 100;\r\nlet desconto = 20;\r\n\r\n// Calcula o valor do desconto e o preço com o desconto\r\nlet valorDesconto = preco * (desconto / 100);\r\nlet precoFinal = preco - valorDesconto;\r\n\r\n// Exibe o preço final\r\nconsole.log(\"Preço final: \" + precoFinal);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o preço e o percentual de desconto\r\npreco = 100\r\ndesconto = 20\r\n\r\n# Calcula o valor do desconto e o preço com o desconto\r\nvalor_desconto = preco * (desconto / 100)\r\npreco_final = preco - valor_desconto\r\n\r\n# Exibe o preço final\r\nprint(f\"Preço final: {preco_final}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o preço e o percentual de desconto\r\npreco = 100\r\ndesconto = 20\r\n\r\n# Calcula o valor do desconto e o preço com o desconto\r\nvalor_desconto = preco * (desconto / 100)\r\npreco_final = preco - valor_desconto\r\n\r\n# Exibe o preço final\r\nprint(f\"Preço final: {preco_final}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>100 20</input>\r\n        <expectedOutput>Preço final: 80</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50 10</input>\r\n        <expectedOutput>Preço final: 45</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>200 15</input>\r\n        <expectedOutput>Preço final: 170</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>120 25</input>\r\n        <expectedOutput>Preço final: 90</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>150 30</input>\r\n        <expectedOutput>Preço final: 105</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>80 5</input>\r\n        <expectedOutput>Preço final: 76</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>500 10</input>\r\n        <expectedOutput>Preço final: 450</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>90 50</input>\r\n        <expectedOutput>Preço final: 45</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>250 40</input>\r\n        <expectedOutput>Preço final: 150</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>300 20</input>\r\n        <expectedOutput>Preço final: 240</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "35-maiuscula",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se uma letra é maiúscula ou minúscula</title>\r\n    <description>Crie um programa que solicite ao usuário uma letra e determine se ela é maiúscula ou minúscula. Este exercício ajuda a entender como trabalhar com caracteres e suas propriedades em programação.</description>\r\n    \r\n    <objective>Ensinar a identificação de caracteres maiúsculos e minúsculos, utilizando as funções e métodos para manipulação de strings e caracteres.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que leia uma letra fornecida pelo usuário e determine se ela é maiúscula ou minúscula. O programa deve exibir uma mensagem informando o tipo da letra.\r\n    </task>\r\n    <explanation>Para verificar se uma letra é maiúscula ou minúscula, podemos comparar o código ASCII da letra ou usar funções específicas da linguagem que retornam se o caractere é maiúsculo ou minúsculo. A letra A-Z tem valores ASCII entre 65 e 90 (maiúsculas) e a letra a-z entre 97 e 122 (minúsculas).</explanation>\r\n    \r\n    <inputFormat>O programa deve receber uma única letra como entrada.</inputFormat>\r\n    \r\n    <inputExample>A</inputExample>\r\n    \r\n    <outputFormat>O programa deve informar se a letra é maiúscula ou minúscula.</outputFormat>\r\n    \r\n    <outputExample>Maiúscula</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita uma letra\r\n$letra = 'A';\r\n\r\n// Verifica se a letra é maiúscula ou minúscula\r\nif (ctype_upper($letra)) {\r\n    echo \"Maiúscula\";\r\n} elseif (ctype_lower($letra)) {\r\n    echo \"Minúscula\";\r\n} else {\r\n    echo \"Entrada inválida\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet letra = 'A';\r\n\r\n// Verifica se a letra é maiúscula ou minúscula\r\nif (letra === letra.toUpperCase()) {\r\n    console.log(\"Maiúscula\");\r\n} else if (letra === letra.toLowerCase()) {\r\n    console.log(\"Minúscula\");\r\n} else {\r\n    console.log(\"Entrada inválida\");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita uma letra\r\nletra = 'A'\r\n\r\n# Verifica se a letra é maiúscula ou minúscula\r\nif letra.isupper():\r\n    print(\"Maiúscula\")\r\nelif letra.islower():\r\n    print(\"Minúscula\")\r\nelse:\r\n    print(\"Entrada inválida\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita uma letra\r\nletra = 'A'\r\n\r\n# Verifica se a letra é maiúscula ou minúscula\r\nif letra.isupper():\r\n    print(\"Maiúscula\")\r\nelif letra.islower():\r\n    print(\"Minúscula\")\r\nelse:\r\n    print(\"Entrada inválida\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>A</input>\r\n        <expectedOutput>Maiúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>b</input>\r\n        <expectedOutput>Minúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Z</input>\r\n        <expectedOutput>Maiúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>d</input>\r\n        <expectedOutput>Minúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>H</input>\r\n        <expectedOutput>Maiúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>i</input>\r\n        <expectedOutput>Minúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>J</input>\r\n        <expectedOutput>Maiúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>k</input>\r\n        <expectedOutput>Minúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Q</input>\r\n        <expectedOutput>Maiúscula</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>r</input>\r\n        <expectedOutput>Minúscula</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "36-multiplo 5",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Calcular a soma dos números múltiplos de 5 até N</title>\r\n    <description>Crie um programa que solicite um número N e calcule a soma de todos os múltiplos de 5 até esse número. Este exercício ajuda a entender como trabalhar com loops e operações matemáticas simples.</description>\r\n    \r\n    <objective>Ensinar a utilização de loops e a manipulação de números inteiros para calcular a soma de múltiplos de 5.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número N e calcule a soma de todos os números múltiplos de 5 de 1 até N. O programa deve exibir o resultado da soma.\r\n    </task>\r\n    <explanation>Para resolver essa questão, o programa deve percorrer todos os números de 1 até N e verificar se são divisíveis por 5, somando-os. Isso pode ser feito usando um loop e a operação de módulo (%).</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro N.</inputFormat>\r\n    \r\n    <inputExample>20</inputExample>\r\n    \r\n    <outputFormat>O programa deve exibir a soma de todos os múltiplos de 5 até N.</outputFormat>\r\n    \r\n    <outputExample>50</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita um número N\r\n$N = 20;\r\n$soma = 0;\r\n\r\n// Loop para calcular a soma dos múltiplos de 5\r\nfor ($i = 5; $i <= $N; $i += 5) {\r\n    $soma += $i;\r\n}\r\n\r\necho \"Soma dos múltiplos de 5 até $N: $soma\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet N = 20;\r\nlet soma = 0;\r\n\r\n// Loop para calcular a soma dos múltiplos de 5\r\nfor (let i = 5; i <= N; i += 5) {\r\n    soma += i;\r\n}\r\n\r\nconsole.log(`Soma dos múltiplos de 5 até ${N}: ${soma}`);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita um número N\r\nN = 20\r\nsoma = 0\r\n\r\n# Loop para calcular a soma dos múltiplos de 5\r\nfor i in range(5, N+1, 5):\r\n    soma += i\r\n\r\nprint(f\"Soma dos múltiplos de 5 até {N}: {soma}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita um número N\r\nN = 20\r\nsoma = 0\r\n\r\n# Loop para calcular a soma dos múltiplos de 5\r\nfor i in range(5, N+1, 5):\r\n    soma += i\r\n\r\nprint(f\"Soma dos múltiplos de 5 até {N}: {soma}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>LOOPS</category>\r\n    <level>INITIAL</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>20</input>\r\n        <expectedOutput>50</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>30</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>15</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25</input>\r\n        <expectedOutput>75</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>30</input>\r\n        <expectedOutput>105</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5</input>\r\n        <expectedOutput>5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>275</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>40</input>\r\n        <expectedOutput>300</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100</input>\r\n        <expectedOutput>1050</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12</input>\r\n        <expectedOutput>30</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "37- transformar string",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Transformar uma string em maiúscula</title>\r\n    <description>Crie um programa que solicite uma string ao usuário e a transforme em maiúsculas. Este exercício ajuda a entender como manipular strings e trabalhar com funções de transformação de texto.</description>\r\n    \r\n    <objective>Ensinar a utilização de funções de manipulação de strings, como transformar caracteres de uma string em maiúscula.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba uma string e a converta para maiúsculas. O programa deve exibir a string resultante em maiúsculas.\r\n    </task>\r\n    <explanation>Para resolver essa questão, o programa deve utilizar a função apropriada da linguagem escolhida para converter todos os caracteres de uma string para maiúsculas. O comportamento da função depende da linguagem utilizada.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber uma string de texto.</inputFormat>\r\n    \r\n    <inputExample>olá mundo</inputExample>\r\n    \r\n    <outputFormat>O programa deve exibir a string convertida para maiúsculas.</outputFormat>\r\n    \r\n    <outputExample>OLÁ MUNDO</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita uma string\r\n$string = \"olá mundo\";\r\n\r\n// Converte a string para maiúsculas\r\n$string_maiuscula = strtoupper($string);\r\n\r\necho $string_maiuscula;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet string = \"olá mundo\";\r\n\r\n// Converte a string para maiúsculas\r\nlet stringMaiuscula = string.toUpperCase();\r\n\r\nconsole.log(stringMaiuscula);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita uma string\r\nstring = \"olá mundo\"\r\n\r\n# Converte a string para maiúsculas\r\nstring_maiuscula = string.upper()\r\n\r\nprint(string_maiuscula)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita uma string\r\nstring = \"olá mundo\"\r\n\r\n# Converte a string para maiúsculas\r\nstring_maiuscula = string.upper()\r\n\r\nprint(string_maiuscula)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>olá mundo</input>\r\n        <expectedOutput>OLÁ MUNDO</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>programação em python</input>\r\n        <expectedOutput>PROGRAMAÇÃO EM PYTHON</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>exemplo de texto</input>\r\n        <expectedOutput>EXEMPLO DE TEXTO</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Olá</input>\r\n        <expectedOutput>OLÁ</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>linguagem C</input>\r\n        <expectedOutput>LINGUAGEM C</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>testando maiúsculas</input>\r\n        <expectedOutput>TESTANDO MAIÚSCULAS</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>string de exemplo</input>\r\n        <expectedOutput>STRING DE EXEMPLO</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>comandos python</input>\r\n        <expectedOutput>COMANDOS PYTHON</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>desenvolvimento web</input>\r\n        <expectedOutput>DESENVOLVIMENTO WEB</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>java script</input>\r\n        <expectedOutput>JAVA SCRIPT</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "38-binario",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Converter um número em binário</title>\r\n    <description>Crie um programa que solicite um número inteiro e converta esse número para sua representação binária. Esse exercício é útil para entender a conversão entre sistemas numéricos e a manipulação de números em diferentes bases.</description>\r\n    \r\n    <objective>Ensinar a conversão de um número inteiro para sua representação binária, abordando a utilização de operações matemáticas e funções de conversão.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número inteiro e o converta para sua representação binária. O programa deve exibir o número no formato binário.\r\n    </task>\r\n    <explanation>Para resolver essa questão, o programa deve utilizar a função apropriada para converter o número inteiro fornecido para sua representação binária, que pode ser feita através de operações matemáticas ou utilizando funções nativas das linguagens.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>10</inputExample>\r\n    \r\n    <outputFormat>O programa deve exibir o número convertido para binário.</outputFormat>\r\n    \r\n    <outputExample>1010</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita um número inteiro\r\n$numero = 10;\r\n\r\n// Converte o número para binário\r\n$binario = decbin($numero);\r\n\r\necho $binario;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = 10;\r\n\r\n// Converte o número para binário\r\nlet binario = numero.toString(2);\r\n\r\nconsole.log(binario);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita um número inteiro\r\nnumero = 10\r\n\r\n# Converte o número para binário\r\nbinario = bin(numero)[2:]\r\n\r\nprint(binario)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita um número inteiro\r\nnumero = 10\r\n\r\n# Converte o número para binário\r\nbinario = bin(numero)[2:]\r\n\r\nprint(binario)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n<testCases>\r\n    <testCase>\r\n        <input>10</input>\r\n        <expectedOutput>1010</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>5</input>\r\n        <expectedOutput>101</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>32</input>\r\n        <expectedOutput>100000</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2</input>\r\n        <expectedOutput>10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8</input>\r\n        <expectedOutput>1000</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>1111</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>4</input>\r\n        <expectedOutput>100</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100</input>\r\n        <expectedOutput>1100100</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50</input>\r\n        <expectedOutput>110010</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "39-MDC",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Encontrar o maior divisor comum (MDC)</title>\r\n    <description>Crie um programa que, dados dois números inteiros, calcule o maior divisor comum (MDC) entre eles. Este exercício é importante para entender a relação entre os divisores de dois números e como calcular o MDC de forma eficiente.</description>\r\n    \r\n    <objective>Ensinar a calcular o maior divisor comum (MDC) entre dois números inteiros, utilizando o algoritmo de Euclides ou outra técnica eficiente.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba dois números inteiros e calcule o maior divisor comum (MDC) entre eles. O programa deve exibir o valor do MDC.\r\n    </task>\r\n    <explanation>O MDC de dois números é o maior número que divide ambos sem deixar resto. O algoritmo de Euclides é uma forma eficiente de calcular o MDC, onde repetidamente dividimos o maior número pelo menor até o resto ser zero. O último divisor não nulo é o MDC.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber dois números inteiros.</inputFormat>\r\n    \r\n    <inputExample>48, 18</inputExample>\r\n    \r\n    <outputFormat>O programa deve exibir o maior divisor comum (MDC) entre os dois números.</outputFormat>\r\n    \r\n    <outputExample>6</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita os dois números inteiros\r\n$numero1 = 48;\r\n$numero2 = 18;\r\n\r\n// Função para calcular o MDC usando o algoritmo de Euclides\r\nfunction mdc($a, $b) {\r\n    while ($b != 0) {\r\n        $temp = $b;\r\n        $b = $a % $b;\r\n        $a = $temp;\r\n    }\r\n    return $a;\r\n}\r\n\r\necho mdc($numero1, $numero2);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction mdc(a, b) {\r\n    while (b != 0) {\r\n        let temp = b;\r\n        b = a % b;\r\n        a = temp;\r\n    }\r\n    return a;\r\n}\r\n\r\n// Solicita os dois números inteiros\r\nlet numero1 = 48;\r\nlet numero2 = 18;\r\n\r\nconsole.log(mdc(numero1, numero2));\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Função para calcular o MDC usando o algoritmo de Euclides\r\ndef mdc(a, b):\r\n    while b != 0:\r\n        a, b = b, a % b\r\n    return a\r\n\r\n# Solicita os dois números inteiros\r\nnumero1 = 48\r\nnumero2 = 18\r\n\r\nprint(mdc(numero1, numero2))\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Função para calcular o MDC usando o algoritmo de Euclides\r\ndef mdc(a, b):\r\n    while b != 0:\r\n        a, b = b, a % b\r\n    return a\r\n\r\n# Solicita os dois números inteiros\r\nnumero1 = 48\r\nnumero2 = 18\r\n\r\nprint(mdc(numero1, numero2))\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>MATH</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>48, 18</input>\r\n        <expectedOutput>6</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>56, 98</input>\r\n        <expectedOutput>14</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>101, 10</input>\r\n        <expectedOutput>1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>25, 5</input>\r\n        <expectedOutput>5</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100, 25</input>\r\n        <expectedOutput>25</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>20, 30</input>\r\n        <expectedOutput>10</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>72, 120</input>\r\n        <expectedOutput>24</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>7, 5</input>\r\n        <expectedOutput>1</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>18, 24</input>\r\n        <expectedOutput>6</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>50, 100</input>\r\n        <expectedOutput>50</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "40-numero perfeito",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Verificar se um número é perfeito</title>\r\n    <description>Crie um programa que verifique se um número fornecido é perfeito. Um número perfeito é aquele que é igual à soma de seus divisores próprios (excluindo o próprio número).</description>\r\n    \r\n    <objective>Ensinar a verificar se um número é perfeito, utilizando a técnica de soma dos divisores próprios do número.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número inteiro e determine se ele é um número perfeito. O número é perfeito se a soma dos seus divisores próprios (excluindo o próprio número) for igual a ele.\r\n    </task>\r\n    <explanation>Um número perfeito é um número inteiro positivo que é igual à soma de seus divisores próprios (divisores menores que o próprio número). Por exemplo, 6 é perfeito, pois seus divisores próprios são 1, 2 e 3, e 1 + 2 + 3 = 6.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>6</inputExample>\r\n    \r\n    <outputFormat>O programa deve informar se o número fornecido é perfeito ou não.</outputFormat>\r\n    \r\n    <outputExample>6 é um número perfeito.</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Função para verificar se o número é perfeito\r\nfunction isPerfectNumber($n) {\r\n    $sum = 0;\r\n    for ($i = 1; $i <= $n / 2; $i++) {\r\n        if ($n % $i == 0) {\r\n            $sum += $i;\r\n        }\r\n    }\r\n    return $sum == $n;\r\n}\r\n\r\n// Solicita o número\r\n$numero = 6;\r\n\r\nif (isPerfectNumber($numero)) {\r\n    echo $numero . \" é um número perfeito.\";\r\n} else {\r\n    echo $numero . \" não é um número perfeito.\";\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nfunction isPerfectNumber(n) {\r\n    let sum = 0;\r\n    for (let i = 1; i <= n / 2; i++) {\r\n        if (n % i === 0) {\r\n            sum += i;\r\n        }\r\n    }\r\n    return sum === n;\r\n}\r\n\r\n// Solicita o número\r\nlet numero = 6;\r\n\r\nif (isPerfectNumber(numero)) {\r\n    console.log(numero + \" é um número perfeito.\");\r\n} else {\r\n    console.log(numero + \" não é um número perfeito.\");\r\n}\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Função para verificar se o número é perfeito\r\ndef is_perfect_number(n):\r\n    soma = 0\r\n    for i in range(1, n // 2 + 1):\r\n        if n % i == 0:\r\n            soma += i\r\n    return soma == n\r\n\r\n# Solicita o número\r\nnumero = 6\r\n\r\nif is_perfect_number(numero):\r\n    print(f\"{numero} é um número perfeito.\")\r\nelse:\r\n    print(f\"{numero} não é um número perfeito.\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Função para verificar se o número é perfeito\r\ndef is_perfect_number(n):\r\n    soma = 0\r\n    for i in range(1, n // 2 + 1):\r\n        if n % i == 0:\r\n            soma += i\r\n    return soma == n\r\n\r\n# Solicita o número\r\nnumero = 6\r\n\r\nif is_perfect_number(numero):\r\n    print(f\"{numero} é um número perfeito.\")\r\nelse:\r\n    print(f\"{numero} não é um número perfeito.\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n    <testCase>\r\n        <input>6</input>\r\n        <expectedOutput>6 é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>28</input>\r\n        <expectedOutput>28 é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>12</input>\r\n        <expectedOutput>12 não é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>496</input>\r\n        <expectedOutput>496 é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>8128</input>\r\n        <expectedOutput>8128 é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>15</input>\r\n        <expectedOutput>15 não é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>1</input>\r\n        <expectedOutput>1 não é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>2</input>\r\n        <expectedOutput>2 não é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>33550336</input>\r\n        <expectedOutput>33550336 é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>100</input>\r\n        <expectedOutput>100 não é um número perfeito.</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "41-substituir palavra",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Substituir uma palavra em uma frase</title>\r\n    <description>Crie um programa que receba uma frase, uma palavra para substituir e uma nova palavra, e substitua a palavra original na frase.</description>\r\n    \r\n    <objective>Ensinar como realizar substituições de palavras em uma frase, utilizando manipulação de strings.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba uma frase, uma palavra a ser substituída e a nova palavra, e substitua a palavra original na frase pela nova palavra fornecida.\r\n    </task>\r\n    <explanation>Para realizar essa substituição, pode-se utilizar funções ou métodos específicos da linguagem escolhida, como o `replace()` em Python, JavaScript ou PHP, que substitui todas as ocorrências de uma palavra na string.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber três entradas: uma frase, uma palavra a ser substituída e uma nova palavra.</inputFormat>\r\n    \r\n    <inputExample>Eu gosto de maçã. maçã banana</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir a frase com a palavra substituída.</outputFormat>\r\n    \r\n    <outputExample>Eu gosto de banana.</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita a frase, palavra a ser substituída e nova palavra\r\n$frase = \"Eu gosto de maçã.\";\r\n$palavraOriginal = \"maçã\";\r\n$novaPalavra = \"banana\";\r\n\r\n// Substitui a palavra\r\n$novaFrase = str_replace($palavraOriginal, $novaPalavra, $frase);\r\n\r\necho $novaFrase;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet frase = \"Eu gosto de maçã.\";\r\nlet palavraOriginal = \"maçã\";\r\nlet novaPalavra = \"banana\";\r\n\r\n// Substitui a palavra\r\nlet novaFrase = frase.replace(palavraOriginal, novaPalavra);\r\n\r\nconsole.log(novaFrase);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita a frase, palavra a ser substituída e nova palavra\r\nfrase = \"Eu gosto de maçã.\"\r\npalavra_original = \"maçã\"\r\nnova_palavra = \"banana\"\r\n\r\n# Substitui a palavra\r\nnova_frase = frase.replace(palavra_original, nova_palavra)\r\n\r\nprint(nova_frase)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita a frase, palavra a ser substituída e nova palavra\r\nfrase = \"Eu gosto de maçã.\"\r\npalavra_original = \"maçã\"\r\nnova_palavra = \"banana\"\r\n\r\n# Substitui a palavra\r\nnova_frase = frase.replace(palavra_original, nova_palavra)\r\n\r\nprint(nova_frase)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>STRING</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n<testCases>\r\n    <testCase>\r\n        <input>Eu gosto de maçã. maçã banana</input>\r\n        <expectedOutput>Eu gosto de banana.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu amo programar. programar codificar</input>\r\n        <expectedOutput>Eu amo codificar.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>O sol está brilhando. sol lua</input>\r\n        <expectedOutput>O lua está brilhando.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu gosto de café. café chá</input>\r\n        <expectedOutput>Eu gosto de chá.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu tenho um cachorro. cachorro gato</input>\r\n        <expectedOutput>Eu tenho um gato.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu gosto de estudar. estudar ler</input>\r\n        <expectedOutput>Eu gosto de ler.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>O céu está limpo. céu azul</input>\r\n        <expectedOutput>O azul está limpo.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>O carro é rápido. carro moto</input>\r\n        <expectedOutput>O moto é rápido.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Eu adoro viajar. viajar explorar</input>\r\n        <expectedOutput>Eu adoro explorar.</expectedOutput>\r\n    </testCase>\r\n    <testCase>\r\n        <input>Ela gosta de dançar. dançar cantar</input>\r\n        <expectedOutput>Ela gosta de cantar.</expectedOutput>\r\n    </testCase>\r\n</testCases>\r\n\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "42-potencia",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Calcular a potência de 2 de um número</title>\r\n    <description>Crie um programa que receba um número e calcule a potência de 2 desse número.</description>\r\n    \r\n    <objective>Ensinar a calcular a potência de 2 de um número, utilizando operações matemáticas básicas.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número inteiro e calcule a potência de 2 desse número.\r\n    </task>\r\n    <explanation>A potência de 2 de um número é o valor que se obtém ao multiplicar 2 por si mesmo o número de vezes indicado pelo número dado. Por exemplo, se o número for 3, a potência de 2 será 2³ = 8.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>3</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir o valor de 2 elevado à potência do número fornecido.</outputFormat>\r\n    \r\n    <outputExample>8</outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o número\r\n$numero = 3;\r\n\r\n// Calcula a potência de 2\r\n$potencia = pow(2, $numero);\r\n\r\necho $potencia;\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = 3;\r\n\r\n// Calcula a potência de 2\r\nlet potencia = Math.pow(2, numero);\r\n\r\nconsole.log(potencia);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o número\r\nnumero = 3\r\n\r\n# Calcula a potência de 2\r\npotencia = 2 ** numero\r\n\r\nprint(potencia)\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o número\r\nnumero = 3\r\n\r\n# Calcula a potência de 2\r\npotencia = 2 ** numero\r\n\r\nprint(potencia)\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INITIAL</level>\r\n    <points>5</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>3</input>\r\n            <expectedOutput>8</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>32</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>0</input>\r\n            <expectedOutput>1</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>1</input>\r\n            <expectedOutput>2</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>4</input>\r\n            <expectedOutput>16</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "43-operacoes matematicas",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<question>\r\n    <title>Realizar Operações Matemáticas com um Número</title>\r\n    <description>Crie um programa que receba um número e calcule as seguintes operações: soma, subtração, multiplicação, divisão, potência (com base 2) e raiz quadrada.</description>\r\n    \r\n    <objective>Ensinar como realizar operações matemáticas básicas e avançadas, como soma, subtração, multiplicação, divisão, potência e raiz quadrada, utilizando o número fornecido.</objective>\r\n    \r\n    <task>\r\n        O objetivo desta tarefa é escrever um código que receba um número inteiro e realize as operações de soma, subtração, multiplicação, divisão, potência (com base 2) e raiz quadrada, e imprima os resultados de cada uma dessas operações.\r\n    </task>\r\n    <explanation>Este programa deve realizar as operações básicas de aritmética (soma, subtração, multiplicação e divisão) com o número fornecido, além de calcular a potência de 2 desse número e sua raiz quadrada.</explanation>\r\n    \r\n    <inputFormat>O programa deve receber um número inteiro.</inputFormat>\r\n    \r\n    <inputExample>4</inputExample>\r\n    \r\n    <outputFormat>O programa deve imprimir os resultados das operações: soma, subtração, multiplicação, divisão, potência (com base 2) e raiz quadrada do número fornecido.</outputFormat>\r\n    \r\n    <outputExample>\r\n    Soma: 4 + 5 = 9\r\n    Subtração: 4 - 3 = 1\r\n    Multiplicação: 4 * 2 = 8\r\n    Divisão: 4 / 2 = 2\r\n    Potência: 2^4 = 16\r\n    Raiz quadrada: √4 = 2\r\n    </outputExample>\r\n    \r\n    <baseCodes>\r\n        <baseCode>\r\n            <language>php</language>\r\n            <code><![CDATA[\r\n<?php\r\n// Solicita o número\r\n$numero = 4;\r\n\r\n// Realiza as operações\r\n$soma = $numero + 5;\r\n$subtracao = $numero - 3;\r\n$multiplicacao = $numero * 2;\r\n$divisao = $numero / 2;\r\n$potencia = pow(2, $numero);\r\n$raiz = sqrt($numero);\r\n\r\n// Exibe os resultados\r\necho \"Soma: $numero + 5 = $soma\";\r\necho \"Subtração: $numero - 3 = $subtracao\";\r\necho \"Multiplicação: $numero * 2 = $multiplicacao\";\r\necho \"Divisão: $numero / 2 = $divisao\";\r\necho \"Potência: 2^$numero = $potencia\";\r\necho \"Raiz quadrada: √$numero = $raiz\";\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>javascript</language>\r\n            <code><![CDATA[\r\nlet numero = 4;\r\n\r\n// Realiza as operações\r\nlet soma = numero + 5;\r\nlet subtracao = numero - 3;\r\nlet multiplicacao = numero * 2;\r\nlet divisao = numero / 2;\r\nlet potencia = Math.pow(2, numero);\r\nlet raiz = Math.sqrt(numero);\r\n\r\n// Exibe os resultados\r\nconsole.log(\"Soma: \" + numero + \" + 5 = \" + soma);\r\nconsole.log(\"Subtração: \" + numero + \" - 3 = \" + subtracao);\r\nconsole.log(\"Multiplicação: \" + numero + \" * 2 = \" + multiplicacao);\r\nconsole.log(\"Divisão: \" + numero + \" / 2 = \" + divisao);\r\nconsole.log(\"Potência: 2^\" + numero + \" = \" + potencia);\r\nconsole.log(\"Raiz quadrada: √\" + numero + \" = \" + raiz);\r\n]]></code>\r\n        </baseCode>\r\n        <baseCode>\r\n            <language>python</language>\r\n            <code><![CDATA[\r\n# Solicita o número\r\nnumero = 4\r\n\r\n# Realiza as operações\r\nsoma = numero + 5\r\nsubtracao = numero - 3\r\nmultiplicacao = numero * 2\r\ndivisao = numero / 2\r\npotencia = 2 ** numero\r\nraiz = numero ** 0.5\r\n\r\n# Exibe os resultados\r\nprint(f\"Soma: {numero} + 5 = {soma}\")\r\nprint(f\"Subtração: {numero} - 3 = {subtracao}\")\r\nprint(f\"Multiplicação: {numero} * 2 = {multiplicacao}\")\r\nprint(f\"Divisão: {numero} / 2 = {divisao}\")\r\nprint(f\"Potência: 2^{numero} = {potencia}\")\r\nprint(f\"Raiz quadrada: √{numero} = {raiz}\")\r\n]]></code>\r\n        </baseCode>\r\n    </baseCodes>\r\n    \r\n    <correctCode>\r\n        <language>python</language>\r\n        <code><![CDATA[\r\n# Solicita o número\r\nnumero = 4\r\n\r\n# Realiza as operações\r\nsoma = numero + 5\r\nsubtracao = numero - 3\r\nmultiplicacao = numero * 2\r\ndivisao = numero / 2\r\npotencia = 2 ** numero\r\nraiz = numero ** 0.5\r\n\r\n# Exibe os resultados\r\nprint(f\"Soma: {numero} + 5 = {soma}\")\r\nprint(f\"Subtração: {numero} - 3 = {subtracao}\")\r\nprint(f\"Multiplicação: {numero} * 2 = {multiplicacao}\")\r\nprint(f\"Divisão: {numero} / 2 = {divisao}\")\r\nprint(f\"Potência: 2^{numero} = {potencia}\")\r\nprint(f\"Raiz quadrada: √{numero} = {raiz}\")\r\n]]></code>\r\n    </correctCode>\r\n    \r\n    <category>NUMBERS</category>\r\n    <level>INTERMEDIATE</level>\r\n    <points>10</points>\r\n\r\n    <testCases>\r\n        <testCase>\r\n            <input>4</input>\r\n            <expectedOutput>Soma: 4 + 5 = 9 Subtração: 4 - 3 = 1 Multiplicação: 4 * 2 = 8 Divisão: 4 / 2 = 2 Potência: 2^4 = 16 Raiz quadrada: √4 = 2.0</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>3</input>\r\n            <expectedOutput>Soma: 3 + 5 = 8 Subtração: 3 - 3 = 0 Multiplicação: 3 * 2 = 6 Divisão: 3 / 2 = 1.5 Potência: 2^3 = 8 Raiz quadrada: √3 = 1.7320508075688772</expectedOutput>\r\n        </testCase>\r\n        <testCase>\r\n            <input>5</input>\r\n            <expectedOutput>Soma: 5 + 5 = 10 Subtração: 5 - 3 = 2 Multiplicação: 5 * 2 = 10 Divisão: 5 / 2 = 2.5 Potência: 2^5 = 32 Raiz quadrada: √5 = 2.23606797749979</expectedOutput>\r\n        </testCase>\r\n    </testCases>\r\n</question>\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/questions/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"questions",
								"save"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KitController",
			"item": [
				{
					"name": "getAll",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTYxNjg5Nn0.sXHYZd6d2YCl8nIEMuQ6mNTOiHXRQhmj-QZmkbaTZXg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:8080/kits/get-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"get-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAll Copy",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTYxNjg5Nn0.sXHYZd6d2YCl8nIEMuQ6mNTOiHXRQhmj-QZmkbaTZXg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://localhost:8080/kits/get-all",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"get-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "get",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTYxNjg5Nn0.sXHYZd6d2YCl8nIEMuQ6mNTOiHXRQhmj-QZmkbaTZXg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/get/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"get",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "01-basic_string",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Basic Strings\",\r\n  \"level\": \"INITIAL\",\r\n  \"category\": \"STRING\",\r\n  \"questions\": [1, 2, 5],\r\n  \"duration\": 30\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "11-10 days of code",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Basic Strings\",\r\n  \"level\": \"INITIAL\",\r\n  \"category\": \"STRING\",\r\n  \"questions\": [1, 2, 5],\r\n  \"duration\": 30\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "02-fibonanci_fatorial",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Fibonacci and Factorials\",\r\n  \"level\": \"INITIAL\",\r\n  \"category\": \"LOOPS\",\r\n  \"questions\": [3, 4, 11],\r\n  \"duration\": 30\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "03-number",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Number Manipulation\",\r\n  \"level\": \"INITIAL\",\r\n  \"category\": \"NUMBERS\",\r\n  \"questions\": [15, 19, 37],\r\n  \"duration\": 15\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/save",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "04-condition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Conditions and Decisions\",\r\n  \"level\": \"INITIAL\",\r\n  \"category\": \"CONDITIONS\",\r\n  \"questionIds\": [7, 9, 17]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "05-array",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Array and Matrices\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"ARRAY\",\r\n  \"questionIds\": [16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "06-math_essentials",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Math Essentials\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"MATH\",\r\n  \"questionIds\": [25, 27, 33]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "07-advanced_string",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Advanced Strings\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"STRING\",\r\n  \"questionIds\": [20, 34, 36]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "08-primos",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Prime Numbers and Beyond\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"LOOPS\",\r\n  \"questionIds\": [12, 13, 23]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "09-operations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Mastering Operations\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"OPERATIONS\",\r\n  \"questionIds\": [6, 8]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "10-conversao",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhdXRoLWFwaSIsInN1YiI6ImpvaG5kb2VhZG1pbkBleGFtcGxlLmNvbSIsImV4cCI6MTc4NTcwMjAwOH0.fCsOxdNPTqrGvk4fVEnY22w_cUw60rtbwHmNpT1MeLI",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Conversions and Conditions\",\r\n  \"level\": \"INTERMEDIATE\",\r\n  \"category\": \"CONVERSIONS\",\r\n  \"questionIds\": [1,2,3,4,5,6,7,8,9,10, 22,11,12,13,14,15]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/kits/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"kits",
								"create"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}